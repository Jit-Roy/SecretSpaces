<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/DropSecretScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/DropSecretScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.Gif&#10;import androidx.compose.material.icons.filled.AccountCircle&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.theme.DarkBackground&#10;import com.secretspaces32.android.ui.theme.DarkSurface&#10;import java.io.File&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DropSecretScreen(&#10;    isLoading: Boolean,&#10;    onPostSecret: (String, Uri?, Boolean, String?, String?, String?) -&gt; Unit,&#10;    onBack: () -&gt; Unit = {},&#10;    cacheDir: File? = null,&#10;    currentUser: User? = null&#10;) {&#10;    var secretText by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var selectedPostType by remember { mutableStateOf(&quot;Secret&quot;) } // &quot;Secret&quot; or &quot;Story&quot;&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // GIF picker launcher&#10;    val gifPickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (!success) {&#10;            // If photo was not taken, clear the URI&#10;            selectedImageUri = null&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Create temp file for camera image&#10;            cacheDir?.let { dir -&gt;&#10;                val photoFile = File.createTempFile(&#10;                    &quot;secret_photo_${System.currentTimeMillis()}&quot;,&#10;                    &quot;.jpg&quot;,&#10;                    dir&#10;                )&#10;                val photoUri = androidx.core.content.FileProvider.getUriForFile(&#10;                    context,&#10;                    &quot;com.secretspaces32.android.fileprovider&quot;,&#10;                    photoFile&#10;                )&#10;                selectedImageUri = photoUri&#10;                cameraLauncher.launch(photoUri)&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground) // Changed to proper black&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground,&#10;                shadowElevation = 4.dp&#10;            ) {&#10;                Column {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .statusBarsPadding()&#10;                            .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Drop a Secret&quot;,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;&#10;                        // Drop button in header&#10;                        IconButton(&#10;                            onClick = {&#10;                                if (secretText.isNotBlank()) {&#10;                                    onPostSecret(secretText, selectedImageUri, false, null, null, null)&#10;                                }&#10;                            },&#10;                            enabled = secretText.isNotBlank() &amp;&amp; !isLoading&#10;                        ) {&#10;                            if (isLoading &amp;&amp; secretText.isNotBlank()) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    color = Color(0xFFFF4D4D),&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.Send,&#10;                                    contentDescription = &quot;Drop Secret&quot;,&#10;                                    tint = if (secretText.isNotBlank()) Color(0xFFFF4D4D) else Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    HorizontalDivider(&#10;                        color = Color.White,&#10;                        thickness = 1.dp&#10;                    )&#10;&#10;                    // Profile Section&#10;                    currentUser?.let { user -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 20.dp, vertical = 16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // User icon&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccountCircle,&#10;                                contentDescription = &quot;User Icon&quot;,&#10;                                tint = Color(0xFFFF4D4D),&#10;                                modifier = Modifier.size(40.dp)&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                            // User name&#10;                            Text(&#10;                                text = user.username.ifEmpty { &quot;Anonymous&quot; },&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Main Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 180.dp), // Increased padding to account for navigation bar + selector&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Secret text input with media buttons - no Surface wrapper&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(&#10;                            color = DarkSurface.copy(alpha = 0.15f),&#10;                        )&#10;                        .padding(horizontal = 20.dp, vertical = 12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = secretText,&#10;                        onValueChange = { secretText = it },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 200.dp),&#10;                        placeholder = {&#10;                            Text(&#10;                                text = &quot;What's on your mind?&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f),&#10;                                fontFamily = FontFamily.Default&#10;                            )&#10;                        },&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            focusedBorderColor = Color.Transparent,&#10;                            unfocusedBorderColor = Color.Transparent,&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedContainerColor = Color.Transparent,&#10;                            unfocusedContainerColor = Color.Transparent&#10;                        ),&#10;                        textStyle = LocalTextStyle.current.copy(&#10;                            fontFamily = FontFamily.Default&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        maxLines = 15&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Character count and media buttons on same line&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${secretText.length}/500 characters&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = Color.White.copy(alpha = 0.5f)&#10;                        )&#10;&#10;                        // Media buttons row&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Image picker button&#10;                            IconButton(&#10;                                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Image,&#10;                                    contentDescription = &quot;Add Image&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Camera button&#10;                            IconButton(&#10;                                onClick = {&#10;                                    cameraPermissionLauncher.launch(android.Manifest.permission.CAMERA)&#10;                                },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.CameraAlt,&#10;                                    contentDescription = &quot;Take Photo&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // GIF picker button&#10;                            IconButton(&#10;                                onClick = { gifPickerLauncher.launch(&quot;image/gif&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Gif,&#10;                                    contentDescription = &quot;Add GIF&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Display selected media&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Box {&#10;                            AsyncImage(&#10;                                model = uri,&#10;                                contentDescription = &quot;Selected media&quot;,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(max = 200.dp)&#10;                                    .clip(RoundedCornerShape(12.dp)),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Surface(&#10;                                onClick = { selectedImageUri = null },&#10;                                modifier = Modifier&#10;                                    .align(Alignment.TopEnd)&#10;                                    .padding(8.dp),&#10;                                shape = CircleShape,&#10;                                color = Color(0xFFFF4D4D)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Close,&#10;                                    contentDescription = &quot;Remove media&quot;,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;&#10;        // Bottom Story/Secret selector - Fixed at bottom above navigation bar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 80.dp, vertical = 110.dp) // Increased to shift buttons higher&#10;        ) {&#10;            // Pill-shaped container with red outline&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(48.dp)&#10;                    .background(&#10;                        color = Color.Black,&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    )&#10;                    .border(&#10;                        width = 2.dp,&#10;                        color = Color(0xFFFF4D4D),&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    ),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Secret button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Secret&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Secret&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Secret&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;&#10;                // Vertical white divider&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(1.dp)&#10;                        .fillMaxHeight()&#10;                        .background(Color(0xFFFF4D4D))&#10;                )&#10;&#10;                // Story button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Story&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Story&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Story&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.Gif&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.theme.DarkBackground&#10;import com.secretspaces32.android.ui.theme.DarkSurface&#10;import java.io.File&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DropSecretScreen(&#10;    isLoading: Boolean,&#10;    onPostSecret: (String, Uri?, Boolean, String?, String?, String?) -&gt; Unit,&#10;    onBack: () -&gt; Unit = {},&#10;    cacheDir: File? = null,&#10;    currentUser: User? = null&#10;) {&#10;    var secretText by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var selectedPostType by remember { mutableStateOf(&quot;Secret&quot;) } // &quot;Secret&quot; or &quot;Story&quot;&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // GIF picker launcher&#10;    val gifPickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (!success) {&#10;            // If photo was not taken, clear the URI&#10;            selectedImageUri = null&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Create temp file for camera image&#10;            cacheDir?.let { dir -&gt;&#10;                val photoFile = File.createTempFile(&#10;                    &quot;secret_photo_${System.currentTimeMillis()}&quot;,&#10;                    &quot;.jpg&quot;,&#10;                    dir&#10;                )&#10;                val photoUri = androidx.core.content.FileProvider.getUriForFile(&#10;                    context,&#10;                    &quot;com.secretspaces32.android.fileprovider&quot;,&#10;                    photoFile&#10;                )&#10;                selectedImageUri = photoUri&#10;                cameraLauncher.launch(photoUri)&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground) // Changed to proper black&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground,&#10;                shadowElevation = 4.dp&#10;            ) {&#10;                Column {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .statusBarsPadding()&#10;                            .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Drop a Secret&quot;,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;&#10;                        // Drop button in header&#10;                        IconButton(&#10;                            onClick = {&#10;                                if (secretText.isNotBlank()) {&#10;                                    onPostSecret(secretText, selectedImageUri, false, null, null, null)&#10;                                }&#10;                            },&#10;                            enabled = secretText.isNotBlank() &amp;&amp; !isLoading&#10;                        ) {&#10;                            if (isLoading &amp;&amp; secretText.isNotBlank()) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    color = Color(0xFFFF4D4D),&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.Send,&#10;                                    contentDescription = &quot;Drop Secret&quot;,&#10;                                    tint = if (secretText.isNotBlank()) Color(0xFFFF4D4D) else Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    HorizontalDivider(&#10;                        color = Color.White,&#10;                        thickness = 1.dp&#10;                    )&#10;&#10;                    // Profile Section&#10;                    currentUser?.let { user -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 20.dp, vertical = 16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // User icon with circle background and outline&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .size(44.dp)&#10;                                    .background(Color(0xFFFF4D4D).copy(alpha = 0.15f), shape = CircleShape)&#10;                                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape)&#10;                                    .clip(CircleShape),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                if (user.profilePictureUrl != null) {&#10;                                    AsyncImage(&#10;                                        model = user.profilePictureUrl,&#10;                                        contentDescription = &quot;Profile&quot;,&#10;                                        modifier = Modifier.fillMaxSize(),&#10;                                        contentScale = ContentScale.Crop&#10;                                    )&#10;                                } else {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Person,&#10;                                        contentDescription = &quot;User Icon&quot;,&#10;                                        tint = Color(0xFFFF4D4D),&#10;                                        modifier = Modifier.size(26.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                            // User name&#10;                            Text(&#10;                                text = user.username.ifEmpty { &quot;Anonymous&quot; },&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Main Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 180.dp), // Increased padding to account for navigation bar + selector&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Secret text input with media buttons - no Surface wrapper&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(&#10;                            color = DarkSurface.copy(alpha = 0.15f),&#10;                        )&#10;                        .padding(horizontal = 20.dp, vertical = 12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = secretText,&#10;                        onValueChange = { secretText = it },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 200.dp),&#10;                        placeholder = {&#10;                            Text(&#10;                                text = &quot;What's on your mind?&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f),&#10;                                fontFamily = FontFamily.Default&#10;                            )&#10;                        },&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            focusedBorderColor = Color.Transparent,&#10;                            unfocusedBorderColor = Color.Transparent,&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedContainerColor = Color.Transparent,&#10;                            unfocusedContainerColor = Color.Transparent&#10;                        ),&#10;                        textStyle = LocalTextStyle.current.copy(&#10;                            fontFamily = FontFamily.Default&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        maxLines = 15&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Character count and media buttons on same line&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${secretText.length}/500 characters&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = Color.White.copy(alpha = 0.5f)&#10;                        )&#10;&#10;                        // Media buttons row&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Image picker button&#10;                            IconButton(&#10;                                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Image,&#10;                                    contentDescription = &quot;Add Image&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Camera button&#10;                            IconButton(&#10;                                onClick = {&#10;                                    cameraPermissionLauncher.launch(android.Manifest.permission.CAMERA)&#10;                                },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.CameraAlt,&#10;                                    contentDescription = &quot;Take Photo&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // GIF picker button&#10;                            IconButton(&#10;                                onClick = { gifPickerLauncher.launch(&quot;image/gif&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Gif,&#10;                                    contentDescription = &quot;Add GIF&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Display selected media&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Box {&#10;                            AsyncImage(&#10;                                model = uri,&#10;                                contentDescription = &quot;Selected media&quot;,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(max = 200.dp)&#10;                                    .clip(RoundedCornerShape(12.dp)),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Surface(&#10;                                onClick = { selectedImageUri = null },&#10;                                modifier = Modifier&#10;                                    .align(Alignment.TopEnd)&#10;                                    .padding(8.dp),&#10;                                shape = CircleShape,&#10;                                color = Color(0xFFFF4D4D)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Close,&#10;                                    contentDescription = &quot;Remove media&quot;,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;&#10;        // Bottom Story/Secret selector - Fixed at bottom above navigation bar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 80.dp, vertical = 110.dp) // Increased to shift buttons higher&#10;        ) {&#10;            // Pill-shaped container with red outline&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(48.dp)&#10;                    .background(&#10;                        color = Color.Black,&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    )&#10;                    .border(&#10;                        width = 2.dp,&#10;                        color = Color(0xFFFF4D4D),&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    ),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Secret button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Secret&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Secret&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Secret&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;&#10;                // Vertical white divider&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(1.dp)&#10;                        .fillMaxHeight()&#10;                        .background(Color(0xFFFF4D4D))&#10;                )&#10;&#10;                // Story button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Story&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Story&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Story&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/FeedScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/FeedScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.location.Location&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.outlined.Comment&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material.icons.outlined.Notifications&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.components.*&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;&#10;// Story data class&#10;data class Story(&#10;    val id: String,&#10;    val username: String,&#10;    val profilePicture: String?,&#10;    val hasUnseenStory: Boolean = false,&#10;    val isYourStory: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun FeedScreen(&#10;    nearbySecrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    currentUser: User? = null,&#10;    friendsWithStories: List&lt;Story&gt; = emptyList(),&#10;    onSecretClick: (Secret) -&gt; Unit,&#10;    onDropSecretClick: () -&gt; Unit,&#10;    onProfileClick: () -&gt; Unit,&#10;    onLikeClick: (Secret) -&gt; Unit = {},&#10;    onMapClick: (Secret) -&gt; Unit = {},&#10;    onNotificationsClick: () -&gt; Unit = {},&#10;    onMessagesClick: () -&gt; Unit = {},&#10;    onStoryClick: (Story) -&gt; Unit = {},&#10;    onAddStoryClick: () -&gt; Unit = {}&#10;) {&#10;    val lazyListState = rememberLazyListState()&#10;&#10;    // Build stories list: &quot;Your Story&quot; + friends' stories&#10;    val stories = remember(currentUser, friendsWithStories) {&#10;        buildList {&#10;            // Always add &quot;Your Story&quot; first&#10;            add(&#10;                Story(&#10;                    id = currentUser?.id ?: &quot;your&quot;,&#10;                    username = &quot;Your Story&quot;,&#10;                    profilePicture = currentUser?.profilePictureUrl,&#10;                    hasUnseenStory = false,&#10;                    isYourStory = true&#10;                )&#10;            )&#10;            // Add friends' stories&#10;            addAll(friendsWithStories)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Header&#10;        Surface(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = DarkBackground,&#10;            shadowElevation = 4.dp&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .statusBarsPadding()&#10;                    .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Home&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = onNotificationsClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                    IconButton(onClick = onMessagesClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Forum,&#10;                            contentDescription = &quot;Messages&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Stories Section - Only show if there are stories to display&#10;        if (stories.isNotEmpty()) {&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground&#10;            ) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(stories) { story -&gt;&#10;                        StoryItem(&#10;                            story = story,&#10;                            onClick = {&#10;                                if (story.isYourStory) {&#10;                                    onAddStoryClick()&#10;                                } else {&#10;                                    onStoryClick(story)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Divider&#10;            HorizontalDivider(&#10;                color = Color.White.copy(alpha = 0.1f),&#10;                thickness = 0.5.dp&#10;            )&#10;        }&#10;&#10;        // Content&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 96.dp&#10;                        )&#10;                    ) {&#10;                        items(5) {&#10;                            ShimmerFeedCard()&#10;                        }&#10;                    }&#10;                }&#10;&#10;                nearbySecrets.isEmpty() -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, style = MaterialTheme.typography.displayMedium)&#10;                            Text(&#10;                                text = &quot;No secrets nearby&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = Color.White,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = &quot;Be the first to drop one!&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = Color.White.copy(alpha = 0.6f)&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Button(&#10;                                onClick = onDropSecretClick,&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = TealPrimary&#10;                                ),&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Add,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&quot;Drop Secret&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 96.dp&#10;                        )&#10;                    ) {&#10;                        items(nearbySecrets, key = { it.id }) { secret -&gt;&#10;                            FeedSecretCard(&#10;                                secret = secret,&#10;                                onLikeClick = { onLikeClick(it) },&#10;                                onCommentClick = { onSecretClick(it) },&#10;                                onMapClick = { onMapClick(it) },&#10;                                onCardClick = { onSecretClick(it) }&#10;                            )&#10;                        }&#10;&#10;                        // Infinite scroll indicator&#10;                        if (nearbySecrets.size &gt;= 10) {&#10;                            item {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(vertical = 16.dp),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        color = TealPrimary,&#10;                                        modifier = Modifier.size(32.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryItem(&#10;    story: Story,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(6.dp),&#10;        modifier = Modifier&#10;            .width(70.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Box(&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Story Ring&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(66.dp)&#10;                    .border(&#10;                        width = 2.5.dp,&#10;                        brush = if (story.hasUnseenStory) {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    TealPrimary,&#10;                                    Color(0xFF8B5CF6),&#10;                                    Color(0xFFEC4899)&#10;                                )&#10;                            )&#10;                        } else {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    Color.White.copy(alpha = 0.3f),&#10;                                    Color.White.copy(alpha = 0.3f)&#10;                                )&#10;                            )&#10;                        },&#10;                        shape = CircleShape&#10;                    )&#10;            )&#10;&#10;            // Profile Picture&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(60.dp)&#10;                    .clip(CircleShape)&#10;                    .background(DarkSurface),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (story.profilePicture != null) {&#10;                    AsyncImage(&#10;                        model = story.profilePicture,&#10;                        contentDescription = story.username,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = if (story.isYourStory) Icons.Default.AccountCircle else Icons.Default.Person,&#10;                        contentDescription = story.username,&#10;                        tint = Color.White.copy(alpha = 0.7f),&#10;                        modifier = Modifier.size(36.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Add icon for &quot;Your Story&quot;&#10;            if (story.isYourStory) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(20.dp)&#10;                        .align(Alignment.BottomEnd)&#10;                        .offset(x = (-2).dp, y = (-2).dp)&#10;                        .clip(CircleShape)&#10;                        .background(TealPrimary)&#10;                        .border(2.dp, DarkBackground, CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Story&quot;,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(14.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Username&#10;        Text(&#10;            text = story.username,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = Color.White,&#10;            fontSize = 11.sp,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Ellipsis,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.location.Location&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.outlined.Comment&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material.icons.outlined.Notifications&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.components.*&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;&#10;// Story data class&#10;data class Story(&#10;    val id: String,&#10;    val username: String,&#10;    val profilePicture: String?,&#10;    val hasUnseenStory: Boolean = false,&#10;    val isYourStory: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun FeedScreen(&#10;    nearbySecrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    currentUser: User? = null,&#10;    friendsWithStories: List&lt;Story&gt; = emptyList(),&#10;    onSecretClick: (Secret) -&gt; Unit,&#10;    onDropSecretClick: () -&gt; Unit,&#10;    onProfileClick: () -&gt; Unit,&#10;    onLikeClick: (Secret) -&gt; Unit = {},&#10;    onMapClick: (Secret) -&gt; Unit = {},&#10;    onNotificationsClick: () -&gt; Unit = {},&#10;    onMessagesClick: () -&gt; Unit = {},&#10;    onStoryClick: (Story) -&gt; Unit = {},&#10;    onAddStoryClick: () -&gt; Unit = {}&#10;) {&#10;    val lazyListState = rememberLazyListState()&#10;&#10;    // Build stories list: &quot;Your Story&quot; + friends' stories&#10;    val stories = remember(currentUser, friendsWithStories) {&#10;        buildList {&#10;            // Always add &quot;Your Story&quot; first&#10;            add(&#10;                Story(&#10;                    id = currentUser?.id ?: &quot;your&quot;,&#10;                    username = &quot;Your Story&quot;,&#10;                    profilePicture = currentUser?.profilePictureUrl,&#10;                    hasUnseenStory = false,&#10;                    isYourStory = true&#10;                )&#10;            )&#10;            // Add friends' stories&#10;            addAll(friendsWithStories)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Header&#10;        Surface(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = DarkBackground,&#10;            shadowElevation = 4.dp&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .statusBarsPadding()&#10;                    .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Home&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = onNotificationsClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                    IconButton(onClick = onMessagesClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Forum,&#10;                            contentDescription = &quot;Messages&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Stories Section - Only show if there are stories to display&#10;        if (stories.isNotEmpty()) {&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground&#10;            ) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(start = 36.dp, end = 20.dp, top = 12.dp, bottom = 12.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(stories) { story -&gt;&#10;                        StoryItem(&#10;                            story = story,&#10;                            onClick = {&#10;                                if (story.isYourStory) {&#10;                                    onAddStoryClick()&#10;                                } else {&#10;                                    onStoryClick(story)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Divider&#10;            HorizontalDivider(&#10;                color = Color.White.copy(alpha = 0.1f),&#10;                thickness = 0.5.dp&#10;            )&#10;        }&#10;&#10;        // Content&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 96.dp&#10;                        )&#10;                    ) {&#10;                        items(5) {&#10;                            ShimmerFeedCard()&#10;                        }&#10;                    }&#10;                }&#10;&#10;                nearbySecrets.isEmpty() -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, style = MaterialTheme.typography.displayMedium)&#10;                            Text(&#10;                                text = &quot;No secrets nearby&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = Color.White,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = &quot;Be the first to drop one!&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = Color.White.copy(alpha = 0.6f)&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Button(&#10;                                onClick = onDropSecretClick,&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = TealPrimary&#10;                                ),&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Add,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&quot;Drop Secret&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 96.dp&#10;                        )&#10;                    ) {&#10;                        items(nearbySecrets, key = { it.id }) { secret -&gt;&#10;                            FeedSecretCard(&#10;                                secret = secret,&#10;                                onLikeClick = { onLikeClick(it) },&#10;                                onCommentClick = { onSecretClick(it) },&#10;                                onMapClick = { onMapClick(it) },&#10;                                onCardClick = { onSecretClick(it) }&#10;                            )&#10;                        }&#10;&#10;                        // Infinite scroll indicator&#10;                        if (nearbySecrets.size &gt;= 10) {&#10;                            item {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(vertical = 16.dp),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        color = TealPrimary,&#10;                                        modifier = Modifier.size(32.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryItem(&#10;    story: Story,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(6.dp),&#10;        modifier = Modifier&#10;            .width(70.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Box(&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Story Ring&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .border(&#10;                        width = 2.dp,&#10;                        brush = if (story.hasUnseenStory) {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    TealPrimary,&#10;                                    Color(0xFF8B5CF6),&#10;                                    Color(0xFFEC4899)&#10;                                )&#10;                            )&#10;                        } else {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    Color.White.copy(alpha = 0.3f),&#10;                                    Color.White.copy(alpha = 0.3f)&#10;                                )&#10;                            )&#10;                        },&#10;                        shape = CircleShape&#10;                    )&#10;            )&#10;&#10;            // Profile Picture&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(44.dp)&#10;                    .background(Color(0xFF1C1C1C), shape = CircleShape)&#10;                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape)&#10;                    .clip(CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (story.profilePicture != null) {&#10;                    AsyncImage(&#10;                        model = story.profilePicture,&#10;                        contentDescription = story.username,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = story.username,&#10;                        tint = Color(0xFFFF4D4D),&#10;                        modifier = Modifier.size(26.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Add icon for &quot;Your Story&quot;&#10;            if (story.isYourStory) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(18.dp)&#10;                        .align(Alignment.BottomEnd)&#10;                        .offset(x = (-1).dp, y = (-1).dp)&#10;                        .clip(CircleShape)&#10;                        .background(TealPrimary)&#10;                        .border(2.dp, DarkBackground, CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Story&quot;,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(12.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Username&#10;        Text(&#10;            text = story.username,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = Color.White,&#10;            fontSize = 11.sp,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Ellipsis,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/TrendsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/TrendsScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;@Composable&#10;fun TrendsScreen(&#10;    onProfileClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Top bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .statusBarsPadding()&#10;                .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Title&#10;            Text(&#10;                text = &quot;Trending&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;&#10;            IconButton(&#10;                onClick = onProfileClick,&#10;                modifier = Modifier&#10;                    .size(42.dp)&#10;                    .background(DarkSurface.copy(alpha = 0.9f), CircleShape)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.AccountCircle,&#10;                    contentDescription = &quot;Profile&quot;,&#10;                    tint = TealPrimary,&#10;                    modifier = Modifier.size(26.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Coming soon placeholder&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.TrendingUp,&#10;                    contentDescription = null,&#10;                    tint = TealPrimary,&#10;                    modifier = Modifier.size(80.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Trending Coming Soon&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Discover what's popular in your area&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = Color.White.copy(alpha = 0.6f)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Preview cards showing what's coming&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(containerColor = DarkSurface),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot; Coming Features:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TealPrimary,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        TrendFeatureItem(&quot; Hottest Secrets&quot;)&#10;                        TrendFeatureItem(&quot; Trending Locations&quot;)&#10;                        TrendFeatureItem(&quot; Top Contributors&quot;)&#10;                        TrendFeatureItem(&quot; Daily Statistics&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TrendFeatureItem(text: String) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.Start,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = Color.White.copy(alpha = 0.8f)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;@Composable&#10;fun TrendsScreen(&#10;    onProfileClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Top bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .statusBarsPadding()&#10;                .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Title&#10;            Text(&#10;                text = &quot;Trending&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;&#10;            IconButton(&#10;                onClick = onProfileClick,&#10;                modifier = Modifier&#10;                    .size(42.dp)&#10;                    .background(Color(0xFF1C1C1C), CircleShape)&#10;                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;Profile&quot;,&#10;                    tint = Color(0xFFFF4D4D),&#10;                    modifier = Modifier.size(26.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Coming soon placeholder&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.TrendingUp,&#10;                    contentDescription = null,&#10;                    tint = TealPrimary,&#10;                    modifier = Modifier.size(80.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Trending Coming Soon&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Discover what's popular in your area&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = Color.White.copy(alpha = 0.6f)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Preview cards showing what's coming&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(containerColor = DarkSurface),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot; Coming Features:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TealPrimary,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        TrendFeatureItem(&quot; Hottest Secrets&quot;)&#10;                        TrendFeatureItem(&quot; Trending Locations&quot;)&#10;                        TrendFeatureItem(&quot; Top Contributors&quot;)&#10;                        TrendFeatureItem(&quot; Daily Statistics&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TrendFeatureItem(text: String) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.Start,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = Color.White.copy(alpha = 0.8f)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>