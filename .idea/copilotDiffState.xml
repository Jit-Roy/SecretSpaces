<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/FIREBASE_STORAGE_SETUP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FIREBASE_STORAGE_SETUP.md" />
              <option name="updatedContent" value="# Firebase Storage Setup Documentation&#10;&#10;## Overview&#10;This document describes the Firebase Storage setup for handling images in the Secret Spaces Android app.&#10;&#10;## Storage Structure&#10;&#10;The Firebase Storage is organized into three main directories:&#10;&#10;### 1. Profile Pictures&#10;- **Path**: `profile_pictures/{userId}/profile_{timestamp}.jpg`&#10;- **Purpose**: Store user profile pictures&#10;- **Access**: &#10;  - Read: Public (anyone can view)&#10;  - Write: Owner only&#10;  - Delete: Owner only&#10;&#10;### 2. Post/Secret Images&#10;- **Path**: `post_images/{userId}/{postId}_{timestamp}.jpg`&#10;- **Purpose**: Store images attached to posts/secrets&#10;- **Access**:&#10;  - Read: Public (anyone can view)&#10;  - Create: Owner only&#10;  - Delete: Owner only&#10;  - Update: Not allowed (immutable)&#10;&#10;### 3. Story Images&#10;- **Path**: `story_images/{userId}/story_{timestamp}.jpg`&#10;- **Purpose**: Store temporary story images (24-hour expiration)&#10;- **Access**:&#10;  - Read: Public (anyone can view)&#10;  - Create: Owner only&#10;  - Delete: Owner only&#10;  - Update: Not allowed (immutable)&#10;&#10;## Implementation&#10;&#10;### FirebaseStorageManager Class&#10;&#10;Located at: `com.secretspaces32.android.data.storage.FirebaseStorageManager`&#10;&#10;This centralized manager handles all image upload operations with the following features:&#10;&#10;#### Key Methods&#10;&#10;1. **`uploadProfilePicture(imageUri: Uri): Result&lt;String&gt;`**&#10;   - Uploads a user's profile picture&#10;   - Returns the download URL&#10;&#10;2. **`uploadPostImage(imageUri: Uri, postId: String?): Result&lt;String&gt;`**&#10;   - Uploads an image for a post/secret&#10;   - Returns the download URL&#10;&#10;3. **`uploadStoryImage(imageUri: Uri): Result&lt;String&gt;`**&#10;   - Uploads a story image with 24-hour expiration metadata&#10;   - Returns the download URL&#10;&#10;4. **`deleteImage(imageUrl: String): Result&lt;Unit&gt;`**&#10;   - Deletes a specific image by URL&#10;&#10;5. **`deleteUserProfilePictures(userId: String): Result&lt;Unit&gt;`**&#10;   - Deletes all profile pictures for a user&#10;&#10;6. **`deleteUserPosts(userId: String): Result&lt;Unit&gt;`**&#10;   - Deletes all post images for a user&#10;&#10;7. **`deleteUserStories(userId: String): Result&lt;Unit&gt;`**&#10;   - Deletes all story images for a user&#10;&#10;8. **`deleteExpiredStories(userId: String): Result&lt;Int&gt;`**&#10;   - Cleans up story images older than 24 hours&#10;   - Returns count of deleted items&#10;&#10;#### Features&#10;&#10;- **Automatic Authentication**: Verifies user is logged in before operations&#10;- **Metadata Tracking**: Stores upload timestamp, user ID, and image type&#10;- **Type Safety**: Uses enum for image types (PROFILE, POST, STORY)&#10;- **Error Handling**: Returns `Result&lt;T&gt;` for proper error management&#10;- **Organized Structure**: Maintains clean folder hierarchy&#10;&#10;## Repository Integration&#10;&#10;### FirebaseUserRepository&#10;- Uses `storageManager.uploadProfilePicture()` for profile pictures&#10;&#10;### FirebaseSecretRepository&#10;- Uses `storageManager.uploadPostImage()` for post/secret images&#10;&#10;### FirebaseStoryRepository (NEW)&#10;- Uses `storageManager.uploadStoryImage()` for story images&#10;- Includes automatic cleanup of expired stories&#10;- Tracks story views and view counts&#10;&#10;## Security Rules&#10;&#10;The `storage.rules` file in the project root defines Firebase Storage security:&#10;&#10;```&#10;rules_version = '2';&#10;&#10;service firebase.storage {&#10;  match /b/{bucket}/o {&#10;    &#10;    // Profile Pictures&#10;    match /profile_pictures/{userId}/{filename} {&#10;      allow read: if true;&#10;      allow write: if request.auth.uid == userId &amp;&amp; isValidImage();&#10;      allow delete: if request.auth.uid == userId;&#10;    }&#10;    &#10;    // Post Images&#10;    match /post_images/{userId}/{filename} {&#10;      allow read: if true;&#10;      allow create: if request.auth.uid == userId &amp;&amp; isValidImage();&#10;      allow delete: if request.auth.uid == userId;&#10;      allow update: if false;&#10;    }&#10;    &#10;    // Story Images&#10;    match /story_images/{userId}/{filename} {&#10;      allow read: if true;&#10;      allow create: if request.auth.uid == userId &amp;&amp; isValidImage();&#10;      allow delete: if request.auth.uid == userId;&#10;      allow update: if false;&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;### Key Security Features:&#10;- Maximum file size: 10MB&#10;- Allowed formats: JPEG, JPG, PNG, WebP&#10;- Users can only upload to their own directories&#10;- All images are publicly readable&#10;- Users cannot modify existing images (immutable)&#10;&#10;## Deployment Steps&#10;&#10;### 1. Deploy Storage Rules to Firebase&#10;&#10;Using Firebase CLI:&#10;```bash&#10;firebase deploy --only storage&#10;```&#10;&#10;Or manually in Firebase Console:&#10;1. Go to Firebase Console&#10;2. Navigate to Storage → Rules&#10;3. Copy contents from `storage.rules` file&#10;4. Publish the rules&#10;&#10;### 2. Configure Firebase Storage in App&#10;&#10;The storage is already initialized in the repositories. Make sure your `google-services.json` is properly configured.&#10;&#10;### 3. Enable Firebase Storage&#10;&#10;In Firebase Console:&#10;1. Go to Storage section&#10;2. Click &quot;Get Started&quot;&#10;3. Choose your security rules mode&#10;4. Select your storage location (choose closest to your users)&#10;&#10;## Usage Examples&#10;&#10;### Upload Profile Picture&#10;```kotlin&#10;val repository = FirebaseUserRepository()&#10;val result = repository.uploadProfilePicture(userId, imageUri)&#10;&#10;result.onSuccess { downloadUrl -&gt;&#10;    // Update user profile with downloadUrl&#10;}&#10;result.onFailure { error -&gt;&#10;    // Handle error&#10;}&#10;```&#10;&#10;### Upload Post Image&#10;```kotlin&#10;val repository = FirebaseSecretRepository()&#10;// Image upload is handled automatically in createSecret()&#10;val result = repository.createSecret(&#10;    text = &quot;My secret&quot;,&#10;    imageUri = imageUri,&#10;    latitude = lat,&#10;    longitude = lng,&#10;    username = username,&#10;    userProfilePicture = profilePic,&#10;    isAnonymous = false&#10;)&#10;```&#10;&#10;### Create Story&#10;```kotlin&#10;val repository = FirebaseStoryRepository()&#10;val result = repository.createStory(&#10;    imageUri = imageUri,&#10;    caption = &quot;My story&quot;,&#10;    username = username,&#10;    userProfilePicture = profilePic&#10;)&#10;```&#10;&#10;### Clean Up Expired Stories&#10;```kotlin&#10;val repository = FirebaseStoryRepository()&#10;val result = repository.cleanupExpiredStories()&#10;&#10;result.onSuccess { deletedCount -&gt;&#10;    println(&quot;Cleaned up $deletedCount expired stories&quot;)&#10;}&#10;```&#10;&#10;## Best Practices&#10;&#10;1. **Image Optimization**: Compress images before upload to reduce storage costs&#10;2. **Cleanup**: Regularly run cleanup tasks for expired stories&#10;3. **Error Handling**: Always handle upload failures gracefully&#10;4. **Loading States**: Show progress indicators during uploads&#10;5. **Caching**: Use Glide or Coil for efficient image loading and caching&#10;6. **Permissions**: Request storage permissions before image selection&#10;&#10;## Maintenance&#10;&#10;### Periodic Cleanup Task&#10;Consider implementing a background worker to clean up expired stories:&#10;&#10;```kotlin&#10;// Using WorkManager&#10;class CleanupStoriesWorker(context: Context, params: WorkerParameters) &#10;    : CoroutineWorker(context, params) {&#10;    &#10;    override suspend fun doWork(): Result {&#10;        val repository = FirebaseStoryRepository()&#10;        repository.cleanupExpiredStories()&#10;        return Result.success()&#10;    }&#10;}&#10;&#10;// Schedule daily cleanup&#10;val cleanupRequest = PeriodicWorkRequestBuilder&lt;CleanupStoriesWorker&gt;(&#10;    24, TimeUnit.HOURS&#10;).build()&#10;&#10;WorkManager.getInstance(context).enqueue(cleanupRequest)&#10;```&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues&#10;&#10;1. **Upload Fails with Permission Denied**&#10;   - Verify security rules are deployed&#10;   - Check user is authenticated&#10;   - Confirm user ID matches the path&#10;&#10;2. **Image Not Appearing**&#10;   - Verify download URL is saved to Firestore&#10;   - Check image loading library configuration&#10;   - Verify storage bucket is accessible&#10;&#10;3. **Large Upload Times**&#10;   - Compress images before upload&#10;   - Check network connection&#10;   - Consider using lower resolution for thumbnails&#10;&#10;## Cost Optimization&#10;&#10;- **Storage**: ~$0.026/GB per month&#10;- **Downloads**: ~$0.12/GB&#10;- **Uploads**: Free&#10;&#10;Tips to reduce costs:&#10;1. Delete expired content regularly&#10;2. Use appropriate image quality/size&#10;3. Implement image compression&#10;4. Use CDN caching where possible&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/QUICK_SETUP_STORAGE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/QUICK_SETUP_STORAGE.md" />
              <option name="updatedContent" value="# Quick Setup Guide - Firebase Storage&#10;&#10;## What Has Been Set Up&#10;&#10;✅ **FirebaseStorageManager** - Centralized image upload manager&#10;✅ **Story Model &amp; Repository** - Complete story feature with 24-hour expiration&#10;✅ **Updated Repositories** - User and Secret repositories now use the centralized storage&#10;✅ **Security Rules** - Firebase Storage rules for proper access control&#10;&#10;## Files Created/Modified&#10;&#10;### New Files:&#10;1. `app/src/main/java/com/secretspaces32/android/data/storage/FirebaseStorageManager.kt`&#10;2. `app/src/main/java/com/secretspaces32/android/data/model/Story.kt`&#10;3. `app/src/main/java/com/secretspaces32/android/data/repository/FirebaseStoryRepository.kt`&#10;4. `storage.rules` - Firebase Storage security rules&#10;5. `FIREBASE_STORAGE_SETUP.md` - Complete documentation&#10;&#10;### Modified Files:&#10;1. `app/src/main/java/com/secretspaces32/android/data/repository/FirebaseUserRepository.kt`&#10;2. `app/src/main/java/com/secretspaces32/android/data/repository/FirebaseSecretRepository.kt`&#10;&#10;## Next Steps&#10;&#10;### 1. Deploy Firebase Storage Rules&#10;&#10;Open terminal and run:&#10;```bash&#10;firebase login&#10;firebase init storage  # if not already initialized&#10;firebase deploy --only storage&#10;```&#10;&#10;Or deploy manually:&#10;1. Go to [Firebase Console](https://console.firebase.google.com)&#10;2. Select your project&#10;3. Navigate to: **Storage → Rules**&#10;4. Copy content from `storage.rules` file&#10;5. Click **Publish**&#10;&#10;### 2. Enable Firebase Storage&#10;&#10;In Firebase Console:&#10;1. Go to **Storage** section&#10;2. Click **Get Started**&#10;3. Choose **Start in production mode**&#10;4. Select your preferred storage location (e.g., us-central1)&#10;&#10;### 3. Storage Structure&#10;&#10;Your Firebase Storage will be organized as:&#10;```&#10;storage_bucket/&#10;├── profile_pictures/&#10;│   └── {userId}/&#10;│       └── profile_{timestamp}.jpg&#10;├── post_images/&#10;│   └── {userId}/&#10;│       └── {postId}_{timestamp}.jpg&#10;└── story_images/&#10;    └── {userId}/&#10;        └── story_{timestamp}.jpg&#10;```&#10;&#10;## Usage in Your App&#10;&#10;### Upload Profile Picture&#10;```kotlin&#10;val repository = FirebaseUserRepository()&#10;repository.uploadProfilePicture(userId, imageUri)&#10;```&#10;&#10;### Upload Post Image (automatic)&#10;```kotlin&#10;val repository = FirebaseSecretRepository()&#10;repository.createSecret(..., imageUri = uri, ...)&#10;```&#10;&#10;### Create Story&#10;```kotlin&#10;val repository = FirebaseStoryRepository()&#10;repository.createStory(imageUri, caption, username, profilePic)&#10;```&#10;&#10;## Features&#10;&#10;- ✅ **Organized Structure**: Separate folders for profiles, posts, and stories&#10;- ✅ **Security**: Users can only upload to their own folders&#10;- ✅ **Metadata**: Tracks upload time, user, and image type&#10;- ✅ **Auto-cleanup**: Stories expire after 24 hours&#10;- ✅ **Size Limit**: 10MB max per image&#10;- ✅ **Format Support**: JPEG, PNG, WebP&#10;- ✅ **Error Handling**: Proper Result types for error management&#10;&#10;## Testing&#10;&#10;You can test the storage setup by:&#10;1. Building the project&#10;2. Uploading a test image through your app&#10;3. Checking Firebase Console → Storage to verify the file structure&#10;&#10;For detailed documentation, see `FIREBASE_STORAGE_SETUP.md`&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>