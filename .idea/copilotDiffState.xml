<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/DropSecretScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/DropSecretScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.Gif&#10;import androidx.compose.material.icons.filled.AccountCircle&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.theme.DarkBackground&#10;import com.secretspaces32.android.ui.theme.DarkSurface&#10;import java.io.File&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DropSecretScreen(&#10;    isLoading: Boolean,&#10;    onPostSecret: (String, Uri?, Boolean, String?, String?, String?) -&gt; Unit,&#10;    onBack: () -&gt; Unit = {},&#10;    cacheDir: File? = null,&#10;    currentUser: User? = null&#10;) {&#10;    var secretText by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // GIF picker launcher&#10;    val gifPickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (!success) {&#10;            // If photo was not taken, clear the URI&#10;            selectedImageUri = null&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Create temp file for camera image&#10;            cacheDir?.let { dir -&gt;&#10;                val photoFile = File.createTempFile(&#10;                    &quot;secret_photo_${System.currentTimeMillis()}&quot;,&#10;                    &quot;.jpg&quot;,&#10;                    dir&#10;                )&#10;                val photoUri = androidx.core.content.FileProvider.getUriForFile(&#10;                    context,&#10;                    &quot;com.secretspaces32.android.fileprovider&quot;,&#10;                    photoFile&#10;                )&#10;                selectedImageUri = photoUri&#10;                cameraLauncher.launch(photoUri)&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF0C0C0C))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground,&#10;                shadowElevation = 4.dp&#10;            ) {&#10;                Column {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .statusBarsPadding()&#10;                            .padding(16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        IconButton(onClick = onBack) {&#10;                            Icon(&#10;                                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                contentDescription = &quot;Back&quot;,&#10;                                tint = Color(0xFFFF4D4D)&#10;                            )&#10;                        }&#10;&#10;                        Text(&#10;                            text = &quot;Drop a Secret&quot;,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;&#10;                        // Drop button in header&#10;                        IconButton(&#10;                            onClick = {&#10;                                if (secretText.isNotBlank()) {&#10;                                    onPostSecret(secretText, selectedImageUri, false, null, null, null)&#10;                                }&#10;                            },&#10;                            enabled = secretText.isNotBlank() &amp;&amp; !isLoading&#10;                        ) {&#10;                            if (isLoading &amp;&amp; secretText.isNotBlank()) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    color = Color(0xFFFF4D4D),&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.Send,&#10;                                    contentDescription = &quot;Drop Secret&quot;,&#10;                                    tint = if (secretText.isNotBlank()) Color(0xFFFF4D4D) else Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    HorizontalDivider(&#10;                        color = Color.White,&#10;                        thickness = 1.dp&#10;                    )&#10;&#10;                    // Profile Section&#10;                    currentUser?.let { user -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 20.dp, vertical = 16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // User icon&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccountCircle,&#10;                                contentDescription = &quot;User Icon&quot;,&#10;                                tint = Color(0xFFFF4D4D),&#10;                                modifier = Modifier.size(40.dp)&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                            // User name&#10;                            Text(&#10;                                text = user.username.ifEmpty { &quot;Anonymous&quot; },&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Thin white horizontal line - separates header from content&#10;&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Main Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 20.dp),&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Secret text input with media buttons - no Surface wrapper&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = secretText,&#10;                        onValueChange = { secretText = it },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 200.dp),&#10;                        placeholder = {&#10;                            Text(&#10;                                text = &quot;What's on your mind?&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f),&#10;                                fontFamily = FontFamily.Default&#10;                            )&#10;                        },&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            focusedBorderColor = Color.Transparent,&#10;                            unfocusedBorderColor = Color.Transparent,&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedContainerColor = Color.Transparent,&#10;                            unfocusedContainerColor = Color.Transparent&#10;                        ),&#10;                        textStyle = LocalTextStyle.current.copy(&#10;                            fontFamily = FontFamily.Default&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        maxLines = 15&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Character count and media buttons on same line&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${secretText.length}/500 characters&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = Color.White.copy(alpha = 0.5f)&#10;                        )&#10;&#10;                        // Media buttons row&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Image picker button&#10;                            IconButton(&#10;                                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Image,&#10;                                    contentDescription = &quot;Add Image&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Camera button&#10;                            IconButton(&#10;                                onClick = {&#10;                                    cameraPermissionLauncher.launch(android.Manifest.permission.CAMERA)&#10;                                },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.CameraAlt,&#10;                                    contentDescription = &quot;Take Photo&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // GIF picker button&#10;                            IconButton(&#10;                                onClick = { gifPickerLauncher.launch(&quot;image/gif&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Gif,&#10;                                    contentDescription = &quot;Add GIF&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Display selected media&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Box {&#10;                            AsyncImage(&#10;                                model = uri,&#10;                                contentDescription = &quot;Selected media&quot;,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(max = 200.dp)&#10;                                    .clip(RoundedCornerShape(12.dp)),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Surface(&#10;                                onClick = { selectedImageUri = null },&#10;                                modifier = Modifier&#10;                                    .align(Alignment.TopEnd)&#10;                                    .padding(8.dp),&#10;                                shape = CircleShape,&#10;                                color = Color(0xFFFF4D4D)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Close,&#10;                                    contentDescription = &quot;Remove media&quot;,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.Gif&#10;import androidx.compose.material.icons.filled.AccountCircle&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.theme.DarkBackground&#10;import com.secretspaces32.android.ui.theme.DarkSurface&#10;import java.io.File&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DropSecretScreen(&#10;    isLoading: Boolean,&#10;    onPostSecret: (String, Uri?, Boolean, String?, String?, String?) -&gt; Unit,&#10;    onBack: () -&gt; Unit = {},&#10;    cacheDir: File? = null,&#10;    currentUser: User? = null&#10;) {&#10;    var secretText by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var selectedPostType by remember { mutableStateOf(&quot;Secret&quot;) } // &quot;Secret&quot; or &quot;Story&quot;&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // GIF picker launcher&#10;    val gifPickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (!success) {&#10;            // If photo was not taken, clear the URI&#10;            selectedImageUri = null&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Create temp file for camera image&#10;            cacheDir?.let { dir -&gt;&#10;                val photoFile = File.createTempFile(&#10;                    &quot;secret_photo_${System.currentTimeMillis()}&quot;,&#10;                    &quot;.jpg&quot;,&#10;                    dir&#10;                )&#10;                val photoUri = androidx.core.content.FileProvider.getUriForFile(&#10;                    context,&#10;                    &quot;com.secretspaces32.android.fileprovider&quot;,&#10;                    photoFile&#10;                )&#10;                selectedImageUri = photoUri&#10;                cameraLauncher.launch(photoUri)&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground) // Changed to proper black&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground,&#10;                shadowElevation = 4.dp&#10;            ) {&#10;                Column {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .statusBarsPadding()&#10;                            .padding(16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        IconButton(onClick = onBack) {&#10;                            Icon(&#10;                                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                contentDescription = &quot;Back&quot;,&#10;                                tint = Color(0xFFFF4D4D)&#10;                            )&#10;                        }&#10;&#10;                        Text(&#10;                            text = &quot;Drop a Secret&quot;,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;&#10;                        // Drop button in header&#10;                        IconButton(&#10;                            onClick = {&#10;                                if (secretText.isNotBlank()) {&#10;                                    onPostSecret(secretText, selectedImageUri, false, null, null, null)&#10;                                }&#10;                            },&#10;                            enabled = secretText.isNotBlank() &amp;&amp; !isLoading&#10;                        ) {&#10;                            if (isLoading &amp;&amp; secretText.isNotBlank()) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    color = Color(0xFFFF4D4D),&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.Send,&#10;                                    contentDescription = &quot;Drop Secret&quot;,&#10;                                    tint = if (secretText.isNotBlank()) Color(0xFFFF4D4D) else Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    HorizontalDivider(&#10;                        color = Color.White,&#10;                        thickness = 1.dp&#10;                    )&#10;&#10;                    // Profile Section&#10;                    currentUser?.let { user -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 20.dp, vertical = 16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // User icon&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccountCircle,&#10;                                contentDescription = &quot;User Icon&quot;,&#10;                                tint = Color(0xFFFF4D4D),&#10;                                modifier = Modifier.size(40.dp)&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                            // User name&#10;                            Text(&#10;                                text = user.username.ifEmpty { &quot;Anonymous&quot; },&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Main Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 20.dp)&#10;                    .padding(bottom = 100.dp), // Add padding for bottom button&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Secret text input with media buttons - no Surface wrapper&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = secretText,&#10;                        onValueChange = { secretText = it },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 200.dp),&#10;                        placeholder = {&#10;                            Text(&#10;                                text = &quot;What's on your mind?&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f),&#10;                                fontFamily = FontFamily.Default&#10;                            )&#10;                        },&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            focusedBorderColor = Color.Transparent,&#10;                            unfocusedBorderColor = Color.Transparent,&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedContainerColor = Color.Transparent,&#10;                            unfocusedContainerColor = Color.Transparent&#10;                        ),&#10;                        textStyle = LocalTextStyle.current.copy(&#10;                            fontFamily = FontFamily.Default&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        maxLines = 15&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Character count and media buttons on same line&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${secretText.length}/500 characters&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = Color.White.copy(alpha = 0.5f)&#10;                        )&#10;&#10;                        // Media buttons row&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Image picker button&#10;                            IconButton(&#10;                                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Image,&#10;                                    contentDescription = &quot;Add Image&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Camera button&#10;                            IconButton(&#10;                                onClick = {&#10;                                    cameraPermissionLauncher.launch(android.Manifest.permission.CAMERA)&#10;                                },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.CameraAlt,&#10;                                    contentDescription = &quot;Take Photo&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // GIF picker button&#10;                            IconButton(&#10;                                onClick = { gifPickerLauncher.launch(&quot;image/gif&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Gif,&#10;                                    contentDescription = &quot;Add GIF&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Display selected media&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Box {&#10;                            AsyncImage(&#10;                                model = uri,&#10;                                contentDescription = &quot;Selected media&quot;,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(max = 200.dp)&#10;                                    .clip(RoundedCornerShape(12.dp)),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Surface(&#10;                                onClick = { selectedImageUri = null },&#10;                                modifier = Modifier&#10;                                    .align(Alignment.TopEnd)&#10;                                    .padding(8.dp),&#10;                                shape = CircleShape,&#10;                                color = Color(0xFFFF4D4D)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Close,&#10;                                    contentDescription = &quot;Remove media&quot;,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;&#10;        // Bottom Story/Secret selector - Fixed at bottom like navigation bar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;                .navigationBarsPadding()&#10;                .padding(horizontal = 80.dp, vertical = 16.dp)&#10;        ) {&#10;            // Pill-shaped container with red outline&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(48.dp)&#10;                    .background(&#10;                        color = Color.Black,&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    )&#10;                    .border(&#10;                        width = 2.dp,&#10;                        color = Color(0xFFFF4D4D),&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    ),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Secret button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Secret&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Secret&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Secret&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;&#10;                // Vertical white divider&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(1.dp)&#10;                        .fillMaxHeight()&#10;                        .background(Color.White)&#10;                )&#10;&#10;                // Story button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Story&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Story&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Story&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>