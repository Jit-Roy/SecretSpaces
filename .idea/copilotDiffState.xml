<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/navigation/SecretSpacesApp.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/navigation/SecretSpacesApp.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.navigation&#10;&#10;import android.Manifest&#10;import android.widget.Toast&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.secretspaces32.android.viewmodel.MainViewModel&#10;import com.secretspaces32.android.ui.screens.*&#10;import com.google.accompanist.permissions.ExperimentalPermissionsApi&#10;import com.google.accompanist.permissions.rememberMultiplePermissionsState&#10;import androidx.credentials.CredentialManager&#10;import androidx.credentials.GetCredentialRequest&#10;import androidx.credentials.CustomCredential&#10;import com.google.android.libraries.identity.googleid.GetGoogleIdOption&#10;import com.google.android.libraries.identity.googleid.GoogleIdTokenCredential&#10;import com.google.android.libraries.identity.googleid.GoogleIdTokenParsingException&#10;import kotlinx.coroutines.launch&#10;&#10;enum class Screen {&#10;    Auth,&#10;    Feed,&#10;    Map,&#10;    DropSecret,&#10;    Profile,&#10;    MySecrets,&#10;    SecretDetail&#10;}&#10;&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;fun SecretSpacesApp() {&#10;    val context = LocalContext.current&#10;    val viewModel: MainViewModel = viewModel(&#10;        factory = object : androidx.lifecycle.ViewModelProvider.Factory {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            override fun &lt;T : androidx.lifecycle.ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                return MainViewModel(context) as T&#10;            }&#10;        }&#10;    )&#10;&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var selectedScreen by remember { mutableStateOf(Screen.Feed) }&#10;&#10;    // Persist the sheet state at navigation level so it survives screen changes&#10;    var mapSheetState by rememberSaveable { mutableStateOf(&quot;COLLAPSED&quot;) }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val credentialManager = remember { CredentialManager.create(context) }&#10;&#10;    // Location permissions - removed automatic request&#10;    // Permissions will be requested from MapScreen when user navigates there&#10;&#10;    // Initialize with default location when authenticated&#10;    LaunchedEffect(uiState.isAuthenticated) {&#10;        if (uiState.isAuthenticated) {&#10;            try {&#10;                println(&quot;DEBUG: App authenticated, initializing with default location&quot;)&#10;                // Call updateLocation - it will use default location if no permission&#10;                viewModel.updateLocation()&#10;            } catch (e: Exception) {&#10;                println(&quot;DEBUG: Error in authentication flow: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Show error messages&#10;    LaunchedEffect(uiState.errorMessage) {&#10;        uiState.errorMessage?.let { message -&gt;&#10;            try {&#10;                Toast.makeText(context, message, Toast.LENGTH_LONG).show()&#10;                viewModel.clearError()&#10;            } catch (e: Exception) {&#10;                println(&quot;DEBUG: Error showing toast: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Show authentication screen if not authenticated&#10;    if (!uiState.isAuthenticated) {&#10;        AuthScreen(&#10;            onSignIn = { email, password -&gt;&#10;                viewModel.signIn(email, password)&#10;            },&#10;            onSignUp = { email, password, username -&gt;&#10;                viewModel.signUp(email, password, username)&#10;            },&#10;            onGoogleSignIn = {&#10;                coroutineScope.launch {&#10;                    try {&#10;                        println(&quot;DEBUG: Starting Google Sign-In process&quot;)&#10;&#10;                        // Configure Google ID option with your Web Client ID from Firebase Console&#10;                        val googleIdOption = GetGoogleIdOption.Builder()&#10;                            .setFilterByAuthorizedAccounts(false)&#10;                            .setServerClientId(&quot;170496527031-ul59lq2gqm76re4an5p2lftol7g3hjfl.apps.googleusercontent.com&quot;)&#10;                            .build()&#10;&#10;                        println(&quot;DEBUG: GoogleIdOption built, creating request&quot;)&#10;&#10;                        val request = GetCredentialRequest.Builder()&#10;                            .addCredentialOption(googleIdOption)&#10;                            .build()&#10;&#10;                        println(&quot;DEBUG: Requesting credentials from CredentialManager&quot;)&#10;&#10;                        val result = credentialManager.getCredential(&#10;                            request = request,&#10;                            context = context&#10;                        )&#10;&#10;                        println(&quot;DEBUG: Credential received, type: ${result.credential.type}&quot;)&#10;&#10;                        when (val credential = result.credential) {&#10;                            is CustomCredential -&gt; {&#10;                                if (credential.type == GoogleIdTokenCredential.TYPE_GOOGLE_ID_TOKEN_CREDENTIAL) {&#10;                                    try {&#10;                                        // Use GoogleIdTokenCredential.createFrom to parse the custom credential&#10;                                        val googleIdTokenCredential = GoogleIdTokenCredential.createFrom(credential.data)&#10;                                        val idToken = googleIdTokenCredential.idToken&#10;                                        println(&quot;DEBUG: Google ID Token extracted from CustomCredential, signing in with Firebase&quot;)&#10;                                        viewModel.signInWithGoogle(idToken)&#10;                                    } catch (e: GoogleIdTokenParsingException) {&#10;                                        println(&quot;DEBUG: Error parsing Google ID Token: ${e.message}&quot;)&#10;                                        Toast.makeText(&#10;                                            context,&#10;                                            &quot;Error parsing Google credentials&quot;,&#10;                                            Toast.LENGTH_SHORT&#10;                                        ).show()&#10;                                    }&#10;                                } else {&#10;                                    println(&quot;DEBUG: Unexpected custom credential type: ${credential.type}&quot;)&#10;                                    Toast.makeText(&#10;                                        context,&#10;                                        &quot;Unexpected credential type: ${credential.type}&quot;,&#10;                                        Toast.LENGTH_SHORT&#10;                                    ).show()&#10;                                }&#10;                            }&#10;                            else -&gt; {&#10;                                println(&quot;DEBUG: Credential is not CustomCredential: ${credential.javaClass.name}&quot;)&#10;                                Toast.makeText(&#10;                                    context,&#10;                                    &quot;Unexpected credential format&quot;,&#10;                                    Toast.LENGTH_SHORT&#10;                                ).show()&#10;                            }&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        println(&quot;DEBUG: Google Sign-In error: ${e.javaClass.simpleName}&quot;)&#10;                        println(&quot;DEBUG: Error message: ${e.message}&quot;)&#10;                        e.printStackTrace()&#10;&#10;                        val errorMessage = when {&#10;                            e.message?.contains(&quot;16&quot;) == true -&gt; &quot;Google Sign-In not configured. Enable it in Firebase Console.&quot;&#10;                            e.message?.contains(&quot;developer console&quot;, ignoreCase = true) == true -&gt;&#10;                                &quot;Please add SHA-1 &amp; SHA-256 to Firebase Console&quot;&#10;                            e.message?.contains(&quot;cancelled&quot;, ignoreCase = true) == true -&gt; &quot;Sign-in cancelled&quot;&#10;                            e.message?.contains(&quot;No credentials&quot;, ignoreCase = true) == true -&gt; &quot;No Google accounts found&quot;&#10;                            else -&gt; &quot;Google Sign-In failed: ${e.message}&quot;&#10;                        }&#10;&#10;                        Toast.makeText(&#10;                            context,&#10;                            errorMessage,&#10;                            Toast.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                }&#10;            },&#10;            isLoading = uiState.isLoading,&#10;            isEmailAuthLoading = uiState.isEmailAuthLoading,&#10;            isGoogleAuthLoading = uiState.isGoogleAuthLoading&#10;        )&#10;        return&#10;    }&#10;&#10;    // Main app navigation&#10;    when (selectedScreen) {&#10;        Screen.Feed, Screen.Map, Screen.Profile -&gt; {&#10;            MainScreenContainer(&#10;                currentLocation = uiState.currentLocation,&#10;                nearbySecrets = uiState.secrets,&#10;                currentUser = uiState.currentUser,&#10;                mySecrets = uiState.mySecrets,&#10;                isLoading = uiState.isLoading,&#10;                onSecretClick = { secret -&gt;&#10;                    viewModel.selectSecret(secret)&#10;                    selectedScreen = Screen.SecretDetail&#10;                },&#10;                onDropSecretClick = {&#10;                    selectedScreen = Screen.DropSecret&#10;                },&#10;                onSignOut = {&#10;                    viewModel.signOut()&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                onUpdateProfile = { username, bio, imageUri -&gt;&#10;                    viewModel.updateProfile(username, bio, imageUri)&#10;                },&#10;                onLikeClick = { secret -&gt;&#10;                    viewModel.toggleLike(secret)&#10;                },&#10;                onLoadMySecrets = {&#10;                    viewModel.loadMySecrets()&#10;                },&#10;                onLocationPermissionGranted = {&#10;                    viewModel.updateLocation()&#10;                }&#10;            )&#10;        }&#10;&#10;        Screen.DropSecret -&gt; {&#10;            DropSecretScreen(&#10;                isLoading = uiState.isLoading,&#10;                onPostSecret = { text, imageUri, isAnonymous, mood, category, hashtags -&gt;&#10;                    viewModel.createSecret(text, imageUri, isAnonymous, mood, category, hashtags)&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                onBack = {&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                cacheDir = context.cacheDir,&#10;                currentUser = uiState.currentUser&#10;            )&#10;        }&#10;&#10;        Screen.Profile -&gt; {&#10;            // Load user's secrets when Profile screen is opened&#10;            LaunchedEffect(Unit) {&#10;                viewModel.loadMySecrets()&#10;            }&#10;&#10;            ProfileScreen(&#10;                user = uiState.currentUser,&#10;                mySecrets = uiState.mySecrets,&#10;                onSignOut = {&#10;                    viewModel.signOut()&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                onUpdateProfile = { username, bio, imageUri -&gt;&#10;                    viewModel.updateProfile(username, bio, imageUri)&#10;                },&#10;                onMySecretsClick = {&#10;                    selectedScreen = Screen.MySecrets&#10;                },&#10;                onBackClick = {&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                isLoading = uiState.isLoading&#10;            )&#10;        }&#10;&#10;        Screen.MySecrets -&gt; {&#10;            MySecretsScreen(&#10;                secrets = uiState.mySecrets,&#10;                isLoading = uiState.isLoading,&#10;                onSecretClick = { secret -&gt;&#10;                    viewModel.selectSecret(secret)&#10;                    selectedScreen = Screen.SecretDetail&#10;                }&#10;            )&#10;        }&#10;&#10;        Screen.SecretDetail -&gt; {&#10;            uiState.selectedSecret?.let { secret -&gt;&#10;                SecretDetailScreen(&#10;                    secret = secret,&#10;                    comments = uiState.selectedSecretComments,&#10;                    likes = uiState.selectedSecretLikes,&#10;                    isLikedByCurrentUser = secret.isLikedByCurrentUser,&#10;                    onLikeClick = {&#10;                        viewModel.toggleLike(secret)&#10;                    },&#10;                    onCommentSubmit = { commentText -&gt;&#10;                        viewModel.addComment(secret.id, commentText)&#10;                    },&#10;                    onBack = {&#10;                        selectedScreen = Screen.Feed&#10;                    },&#10;                    isLoading = uiState.isLoading&#10;                )&#10;            }&#10;        }&#10;        Screen.Auth -&gt; {&#10;            // Should not reach here as we handle auth above&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.navigation&#10;&#10;import android.Manifest&#10;import android.widget.Toast&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.secretspaces32.android.viewmodel.MainViewModel&#10;import com.secretspaces32.android.ui.screens.*&#10;import com.google.accompanist.permissions.ExperimentalPermissionsApi&#10;import com.google.accompanist.permissions.rememberMultiplePermissionsState&#10;import androidx.credentials.CredentialManager&#10;import androidx.credentials.GetCredentialRequest&#10;import androidx.credentials.CustomCredential&#10;import com.google.android.libraries.identity.googleid.GetGoogleIdOption&#10;import com.google.android.libraries.identity.googleid.GoogleIdTokenCredential&#10;import com.google.android.libraries.identity.googleid.GoogleIdTokenParsingException&#10;import kotlinx.coroutines.launch&#10;&#10;enum class Screen {&#10;    Auth,&#10;    Feed,&#10;    Map,&#10;    DropSecret,&#10;    Profile,&#10;    MySecrets,&#10;    SecretDetail&#10;}&#10;&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;fun SecretSpacesApp() {&#10;    val context = LocalContext.current&#10;    val viewModel: MainViewModel = viewModel(&#10;        factory = object : androidx.lifecycle.ViewModelProvider.Factory {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            override fun &lt;T : androidx.lifecycle.ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                return MainViewModel(context) as T&#10;            }&#10;        }&#10;    )&#10;&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var selectedScreen by remember { mutableStateOf(Screen.Feed) }&#10;&#10;    // Persist the sheet state at navigation level so it survives screen changes&#10;    var mapSheetState by rememberSaveable { mutableStateOf(&quot;COLLAPSED&quot;) }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val credentialManager = remember { CredentialManager.create(context) }&#10;&#10;    // Location permissions - removed automatic request&#10;    // Permissions will be requested from MapScreen when user navigates there&#10;&#10;    // Initialize with default location when authenticated&#10;    LaunchedEffect(uiState.isAuthenticated) {&#10;        if (uiState.isAuthenticated) {&#10;            try {&#10;                println(&quot;DEBUG: App authenticated, initializing with default location&quot;)&#10;                // Call updateLocation - it will use default location if no permission&#10;                viewModel.updateLocation()&#10;            } catch (e: Exception) {&#10;                println(&quot;DEBUG: Error in authentication flow: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Show error messages&#10;    LaunchedEffect(uiState.errorMessage) {&#10;        uiState.errorMessage?.let { message -&gt;&#10;            try {&#10;                Toast.makeText(context, message, Toast.LENGTH_LONG).show()&#10;                viewModel.clearError()&#10;            } catch (e: Exception) {&#10;                println(&quot;DEBUG: Error showing toast: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Show authentication screen if not authenticated&#10;    if (!uiState.isAuthenticated) {&#10;        AuthScreen(&#10;            onSignIn = { email, password -&gt;&#10;                viewModel.signIn(email, password)&#10;            },&#10;            onSignUp = { email, password, username -&gt;&#10;                viewModel.signUp(email, password, username)&#10;            },&#10;            onGoogleSignIn = {&#10;                coroutineScope.launch {&#10;                    try {&#10;                        println(&quot;DEBUG: Starting Google Sign-In process&quot;)&#10;&#10;                        // Configure Google ID option with your Web Client ID from Firebase Console&#10;                        val googleIdOption = GetGoogleIdOption.Builder()&#10;                            .setFilterByAuthorizedAccounts(false)&#10;                            .setServerClientId(&quot;170496527031-ul59lq2gqm76re4an5p2lftol7g3hjfl.apps.googleusercontent.com&quot;)&#10;                            .build()&#10;&#10;                        println(&quot;DEBUG: GoogleIdOption built, creating request&quot;)&#10;&#10;                        val request = GetCredentialRequest.Builder()&#10;                            .addCredentialOption(googleIdOption)&#10;                            .build()&#10;&#10;                        println(&quot;DEBUG: Requesting credentials from CredentialManager&quot;)&#10;&#10;                        val result = credentialManager.getCredential(&#10;                            request = request,&#10;                            context = context&#10;                        )&#10;&#10;                        println(&quot;DEBUG: Credential received, type: ${result.credential.type}&quot;)&#10;&#10;                        when (val credential = result.credential) {&#10;                            is CustomCredential -&gt; {&#10;                                if (credential.type == GoogleIdTokenCredential.TYPE_GOOGLE_ID_TOKEN_CREDENTIAL) {&#10;                                    try {&#10;                                        // Use GoogleIdTokenCredential.createFrom to parse the custom credential&#10;                                        val googleIdTokenCredential = GoogleIdTokenCredential.createFrom(credential.data)&#10;                                        val idToken = googleIdTokenCredential.idToken&#10;                                        println(&quot;DEBUG: Google ID Token extracted from CustomCredential, signing in with Firebase&quot;)&#10;                                        viewModel.signInWithGoogle(idToken)&#10;                                    } catch (e: GoogleIdTokenParsingException) {&#10;                                        println(&quot;DEBUG: Error parsing Google ID Token: ${e.message}&quot;)&#10;                                        Toast.makeText(&#10;                                            context,&#10;                                            &quot;Error parsing Google credentials&quot;,&#10;                                            Toast.LENGTH_SHORT&#10;                                        ).show()&#10;                                    }&#10;                                } else {&#10;                                    println(&quot;DEBUG: Unexpected custom credential type: ${credential.type}&quot;)&#10;                                    Toast.makeText(&#10;                                        context,&#10;                                        &quot;Unexpected credential type: ${credential.type}&quot;,&#10;                                        Toast.LENGTH_SHORT&#10;                                    ).show()&#10;                                }&#10;                            }&#10;                            else -&gt; {&#10;                                println(&quot;DEBUG: Credential is not CustomCredential: ${credential.javaClass.name}&quot;)&#10;                                Toast.makeText(&#10;                                    context,&#10;                                    &quot;Unexpected credential format&quot;,&#10;                                    Toast.LENGTH_SHORT&#10;                                ).show()&#10;                            }&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        println(&quot;DEBUG: Google Sign-In error: ${e.javaClass.simpleName}&quot;)&#10;                        println(&quot;DEBUG: Error message: ${e.message}&quot;)&#10;                        e.printStackTrace()&#10;&#10;                        val errorMessage = when {&#10;                            e.message?.contains(&quot;16&quot;) == true -&gt; &quot;Google Sign-In not configured. Enable it in Firebase Console.&quot;&#10;                            e.message?.contains(&quot;developer console&quot;, ignoreCase = true) == true -&gt;&#10;                                &quot;Please add SHA-1 &amp; SHA-256 to Firebase Console&quot;&#10;                            e.message?.contains(&quot;cancelled&quot;, ignoreCase = true) == true -&gt; &quot;Sign-in cancelled&quot;&#10;                            e.message?.contains(&quot;No credentials&quot;, ignoreCase = true) == true -&gt; &quot;No Google accounts found&quot;&#10;                            else -&gt; &quot;Google Sign-In failed: ${e.message}&quot;&#10;                        }&#10;&#10;                        Toast.makeText(&#10;                            context,&#10;                            errorMessage,&#10;                            Toast.LENGTH_LONG&#10;                        ).show()&#10;                    }&#10;                }&#10;            },&#10;            isLoading = uiState.isLoading,&#10;            isEmailAuthLoading = uiState.isEmailAuthLoading,&#10;            isGoogleAuthLoading = uiState.isGoogleAuthLoading&#10;        )&#10;        return&#10;    }&#10;&#10;    // Main app navigation&#10;    when (selectedScreen) {&#10;        Screen.Feed, Screen.Map, Screen.Profile -&gt; {&#10;            MainScreenContainer(&#10;                currentLocation = uiState.currentLocation,&#10;                nearbySecrets = uiState.secrets,&#10;                currentUser = uiState.currentUser,&#10;                mySecrets = uiState.mySecrets,&#10;                isLoading = uiState.isLoading,&#10;                onSecretClick = { secret -&gt;&#10;                    viewModel.selectSecret(secret)&#10;                    selectedScreen = Screen.SecretDetail&#10;                },&#10;                onDropSecretClick = {&#10;                    selectedScreen = Screen.DropSecret&#10;                },&#10;                onSignOut = {&#10;                    viewModel.signOut()&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                onUpdateProfile = { username, bio, imageUri -&gt;&#10;                    viewModel.updateProfile(username, bio, imageUri)&#10;                },&#10;                onLikeClick = { secret -&gt;&#10;                    viewModel.toggleLike(secret)&#10;                },&#10;                onLoadMySecrets = {&#10;                    viewModel.loadMySecrets()&#10;                },&#10;                onLocationPermissionGranted = {&#10;                    viewModel.updateLocation()&#10;                },&#10;                onPostSecret = { text, imageUri, isAnonymous, mood, category, hashtags -&gt;&#10;                    viewModel.createSecret(text, imageUri, isAnonymous, mood, category, hashtags)&#10;                },&#10;                cacheDir = context.cacheDir&#10;            )&#10;        }&#10;&#10;        Screen.DropSecret -&gt; {&#10;            // This case is now handled within MainScreenContainer&#10;            // Redirect to Feed&#10;            selectedScreen = Screen.Feed&#10;        }&#10;&#10;        Screen.Profile -&gt; {&#10;            // Load user's secrets when Profile screen is opened&#10;            LaunchedEffect(Unit) {&#10;                viewModel.loadMySecrets()&#10;            }&#10;&#10;            ProfileScreen(&#10;                user = uiState.currentUser,&#10;                mySecrets = uiState.mySecrets,&#10;                onSignOut = {&#10;                    viewModel.signOut()&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                onUpdateProfile = { username, bio, imageUri -&gt;&#10;                    viewModel.updateProfile(username, bio, imageUri)&#10;                },&#10;                onMySecretsClick = {&#10;                    selectedScreen = Screen.MySecrets&#10;                },&#10;                onBackClick = {&#10;                    selectedScreen = Screen.Feed&#10;                },&#10;                isLoading = uiState.isLoading&#10;            )&#10;        }&#10;&#10;        Screen.MySecrets -&gt; {&#10;            MySecretsScreen(&#10;                secrets = uiState.mySecrets,&#10;                isLoading = uiState.isLoading,&#10;                onSecretClick = { secret -&gt;&#10;                    viewModel.selectSecret(secret)&#10;                    selectedScreen = Screen.SecretDetail&#10;                }&#10;            )&#10;        }&#10;&#10;        Screen.SecretDetail -&gt; {&#10;            uiState.selectedSecret?.let { secret -&gt;&#10;                SecretDetailScreen(&#10;                    secret = secret,&#10;                    comments = uiState.selectedSecretComments,&#10;                    likes = uiState.selectedSecretLikes,&#10;                    isLikedByCurrentUser = secret.isLikedByCurrentUser,&#10;                    onLikeClick = {&#10;                        viewModel.toggleLike(secret)&#10;                    },&#10;                    onCommentSubmit = { commentText -&gt;&#10;                        viewModel.addComment(secret.id, commentText)&#10;                    },&#10;                    onBack = {&#10;                        selectedScreen = Screen.Feed&#10;                    },&#10;                    isLoading = uiState.isLoading&#10;                )&#10;            }&#10;        }&#10;        Screen.Auth -&gt; {&#10;            // Should not reach here as we handle auth above&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/DropSecretScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/DropSecretScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.Gif&#10;import androidx.compose.material.icons.filled.AccountCircle&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.theme.DarkBackground&#10;import com.secretspaces32.android.ui.theme.DarkSurface&#10;import java.io.File&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DropSecretScreen(&#10;    isLoading: Boolean,&#10;    onPostSecret: (String, Uri?, Boolean, String?, String?, String?) -&gt; Unit,&#10;    onBack: () -&gt; Unit = {},&#10;    cacheDir: File? = null,&#10;    currentUser: User? = null&#10;) {&#10;    var secretText by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var selectedPostType by remember { mutableStateOf(&quot;Secret&quot;) } // &quot;Secret&quot; or &quot;Story&quot;&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // GIF picker launcher&#10;    val gifPickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (!success) {&#10;            // If photo was not taken, clear the URI&#10;            selectedImageUri = null&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Create temp file for camera image&#10;            cacheDir?.let { dir -&gt;&#10;                val photoFile = File.createTempFile(&#10;                    &quot;secret_photo_${System.currentTimeMillis()}&quot;,&#10;                    &quot;.jpg&quot;,&#10;                    dir&#10;                )&#10;                val photoUri = androidx.core.content.FileProvider.getUriForFile(&#10;                    context,&#10;                    &quot;com.secretspaces32.android.fileprovider&quot;,&#10;                    photoFile&#10;                )&#10;                selectedImageUri = photoUri&#10;                cameraLauncher.launch(photoUri)&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground) // Changed to proper black&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground,&#10;                shadowElevation = 4.dp&#10;            ) {&#10;                Column {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .statusBarsPadding()&#10;                            .padding(16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        IconButton(onClick = onBack) {&#10;                            Icon(&#10;                                imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                                contentDescription = &quot;Back&quot;,&#10;                                tint = Color(0xFFFF4D4D)&#10;                            )&#10;                        }&#10;&#10;                        Text(&#10;                            text = &quot;Drop a Secret&quot;,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;&#10;                        // Drop button in header&#10;                        IconButton(&#10;                            onClick = {&#10;                                if (secretText.isNotBlank()) {&#10;                                    onPostSecret(secretText, selectedImageUri, false, null, null, null)&#10;                                }&#10;                            },&#10;                            enabled = secretText.isNotBlank() &amp;&amp; !isLoading&#10;                        ) {&#10;                            if (isLoading &amp;&amp; secretText.isNotBlank()) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    color = Color(0xFFFF4D4D),&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.Send,&#10;                                    contentDescription = &quot;Drop Secret&quot;,&#10;                                    tint = if (secretText.isNotBlank()) Color(0xFFFF4D4D) else Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    HorizontalDivider(&#10;                        color = Color.White,&#10;                        thickness = 1.dp&#10;                    )&#10;&#10;                    // Profile Section&#10;                    currentUser?.let { user -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 20.dp, vertical = 16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // User icon&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccountCircle,&#10;                                contentDescription = &quot;User Icon&quot;,&#10;                                tint = Color(0xFFFF4D4D),&#10;                                modifier = Modifier.size(40.dp)&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                            // User name&#10;                            Text(&#10;                                text = user.username.ifEmpty { &quot;Anonymous&quot; },&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Main Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 100.dp), // Add padding for bottom button&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Secret text input with media buttons - no Surface wrapper&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(&#10;                            color = DarkSurface.copy(alpha = 0.15f),&#10;                        )&#10;                        .padding(horizontal = 20.dp, vertical = 12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = secretText,&#10;                        onValueChange = { secretText = it },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 200.dp),&#10;                        placeholder = {&#10;                            Text(&#10;                                text = &quot;What's on your mind?&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f),&#10;                                fontFamily = FontFamily.Default&#10;                            )&#10;                        },&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            focusedBorderColor = Color.Transparent,&#10;                            unfocusedBorderColor = Color.Transparent,&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedContainerColor = Color.Transparent,&#10;                            unfocusedContainerColor = Color.Transparent&#10;                        ),&#10;                        textStyle = LocalTextStyle.current.copy(&#10;                            fontFamily = FontFamily.Default&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        maxLines = 15&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Character count and media buttons on same line&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${secretText.length}/500 characters&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = Color.White.copy(alpha = 0.5f)&#10;                        )&#10;&#10;                        // Media buttons row&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Image picker button&#10;                            IconButton(&#10;                                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Image,&#10;                                    contentDescription = &quot;Add Image&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Camera button&#10;                            IconButton(&#10;                                onClick = {&#10;                                    cameraPermissionLauncher.launch(android.Manifest.permission.CAMERA)&#10;                                },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.CameraAlt,&#10;                                    contentDescription = &quot;Take Photo&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // GIF picker button&#10;                            IconButton(&#10;                                onClick = { gifPickerLauncher.launch(&quot;image/gif&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Gif,&#10;                                    contentDescription = &quot;Add GIF&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Display selected media&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Box {&#10;                            AsyncImage(&#10;                                model = uri,&#10;                                contentDescription = &quot;Selected media&quot;,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(max = 200.dp)&#10;                                    .clip(RoundedCornerShape(12.dp)),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Surface(&#10;                                onClick = { selectedImageUri = null },&#10;                                modifier = Modifier&#10;                                    .align(Alignment.TopEnd)&#10;                                    .padding(8.dp),&#10;                                shape = CircleShape,&#10;                                color = Color(0xFFFF4D4D)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Close,&#10;                                    contentDescription = &quot;Remove media&quot;,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;&#10;        // Bottom Story/Secret selector - Fixed at bottom like navigation bar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;                .navigationBarsPadding()&#10;                .padding(horizontal = 80.dp, vertical = 16.dp)&#10;        ) {&#10;            // Pill-shaped container with red outline&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(48.dp)&#10;                    .background(&#10;                        color = Color.Black,&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    )&#10;                    .border(&#10;                        width = 2.dp,&#10;                        color = Color(0xFFFF4D4D),&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    ),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Secret button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Secret&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Secret&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Secret&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;&#10;                // Vertical white divider&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(1.dp)&#10;                        .fillMaxHeight()&#10;                        .background(Color(0xFFFF4D4D))&#10;                )&#10;&#10;                // Story button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Story&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Story&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Story&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.CameraAlt&#10;import androidx.compose.material.icons.filled.Gif&#10;import androidx.compose.material.icons.filled.AccountCircle&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.theme.DarkBackground&#10;import com.secretspaces32.android.ui.theme.DarkSurface&#10;import java.io.File&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DropSecretScreen(&#10;    isLoading: Boolean,&#10;    onPostSecret: (String, Uri?, Boolean, String?, String?, String?) -&gt; Unit,&#10;    onBack: () -&gt; Unit = {},&#10;    cacheDir: File? = null,&#10;    currentUser: User? = null&#10;) {&#10;    var secretText by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var selectedPostType by remember { mutableStateOf(&quot;Secret&quot;) } // &quot;Secret&quot; or &quot;Story&quot;&#10;    val context = androidx.compose.ui.platform.LocalContext.current&#10;&#10;    // Image picker launcher&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // GIF picker launcher&#10;    val gifPickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (!success) {&#10;            // If photo was not taken, clear the URI&#10;            selectedImageUri = null&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Create temp file for camera image&#10;            cacheDir?.let { dir -&gt;&#10;                val photoFile = File.createTempFile(&#10;                    &quot;secret_photo_${System.currentTimeMillis()}&quot;,&#10;                    &quot;.jpg&quot;,&#10;                    dir&#10;                )&#10;                val photoUri = androidx.core.content.FileProvider.getUriForFile(&#10;                    context,&#10;                    &quot;com.secretspaces32.android.fileprovider&quot;,&#10;                    photoFile&#10;                )&#10;                selectedImageUri = photoUri&#10;                cameraLauncher.launch(photoUri)&#10;            }&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground) // Changed to proper black&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground,&#10;                shadowElevation = 4.dp&#10;            ) {&#10;                Column {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .statusBarsPadding()&#10;                            .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Drop a Secret&quot;,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;&#10;                        // Drop button in header&#10;                        IconButton(&#10;                            onClick = {&#10;                                if (secretText.isNotBlank()) {&#10;                                    onPostSecret(secretText, selectedImageUri, false, null, null, null)&#10;                                }&#10;                            },&#10;                            enabled = secretText.isNotBlank() &amp;&amp; !isLoading&#10;                        ) {&#10;                            if (isLoading &amp;&amp; secretText.isNotBlank()) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(24.dp),&#10;                                    color = Color(0xFFFF4D4D),&#10;                                    strokeWidth = 2.dp&#10;                                )&#10;                            } else {&#10;                                Icon(&#10;                                    imageVector = Icons.AutoMirrored.Filled.Send,&#10;                                    contentDescription = &quot;Drop Secret&quot;,&#10;                                    tint = if (secretText.isNotBlank()) Color(0xFFFF4D4D) else Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    HorizontalDivider(&#10;                        color = Color.White,&#10;                        thickness = 1.dp&#10;                    )&#10;&#10;                    // Profile Section&#10;                    currentUser?.let { user -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 20.dp, vertical = 16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // User icon&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccountCircle,&#10;                                contentDescription = &quot;User Icon&quot;,&#10;                                tint = Color(0xFFFF4D4D),&#10;                                modifier = Modifier.size(40.dp)&#10;                            )&#10;&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                            // User name&#10;                            Text(&#10;                                text = user.username.ifEmpty { &quot;Anonymous&quot; },&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.White&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Main Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 180.dp), // Increased padding to account for navigation bar + selector&#10;                verticalArrangement = Arrangement.spacedBy(20.dp)&#10;            ) {&#10;                // Secret text input with media buttons - no Surface wrapper&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .background(&#10;                            color = DarkSurface.copy(alpha = 0.15f),&#10;                        )&#10;                        .padding(horizontal = 20.dp, vertical = 12.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = secretText,&#10;                        onValueChange = { secretText = it },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 200.dp),&#10;                        placeholder = {&#10;                            Text(&#10;                                text = &quot;What's on your mind?&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f),&#10;                                fontFamily = FontFamily.Default&#10;                            )&#10;                        },&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White,&#10;                            focusedBorderColor = Color.Transparent,&#10;                            unfocusedBorderColor = Color.Transparent,&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedContainerColor = Color.Transparent,&#10;                            unfocusedContainerColor = Color.Transparent&#10;                        ),&#10;                        textStyle = LocalTextStyle.current.copy(&#10;                            fontFamily = FontFamily.Default&#10;                        ),&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        maxLines = 15&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Character count and media buttons on same line&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${secretText.length}/500 characters&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = Color.White.copy(alpha = 0.5f)&#10;                        )&#10;&#10;                        // Media buttons row&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Image picker button&#10;                            IconButton(&#10;                                onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Image,&#10;                                    contentDescription = &quot;Add Image&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Camera button&#10;                            IconButton(&#10;                                onClick = {&#10;                                    cameraPermissionLauncher.launch(android.Manifest.permission.CAMERA)&#10;                                },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.CameraAlt,&#10;                                    contentDescription = &quot;Take Photo&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;&#10;                            // GIF picker button&#10;                            IconButton(&#10;                                onClick = { gifPickerLauncher.launch(&quot;image/gif&quot;) },&#10;                                modifier = Modifier.size(32.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Gif,&#10;                                    contentDescription = &quot;Add GIF&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Display selected media&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        Box {&#10;                            AsyncImage(&#10;                                model = uri,&#10;                                contentDescription = &quot;Selected media&quot;,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(max = 200.dp)&#10;                                    .clip(RoundedCornerShape(12.dp)),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                            Surface(&#10;                                onClick = { selectedImageUri = null },&#10;                                modifier = Modifier&#10;                                    .align(Alignment.TopEnd)&#10;                                    .padding(8.dp),&#10;                                shape = CircleShape,&#10;                                color = Color(0xFFFF4D4D)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Close,&#10;                                    contentDescription = &quot;Remove media&quot;,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;            }&#10;        }&#10;&#10;        // Bottom Story/Secret selector - Fixed at bottom above navigation bar&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 80.dp, vertical = 110.dp) // Increased to shift buttons higher&#10;        ) {&#10;            // Pill-shaped container with red outline&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(48.dp)&#10;                    .background(&#10;                        color = Color.Black,&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    )&#10;                    .border(&#10;                        width = 2.dp,&#10;                        color = Color(0xFFFF4D4D),&#10;                        shape = RoundedCornerShape(24.dp)&#10;                    ),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Secret button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Secret&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topStart = 24.dp, bottomStart = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Secret&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Secret&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;&#10;                // Vertical white divider&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(1.dp)&#10;                        .fillMaxHeight()&#10;                        .background(Color(0xFFFF4D4D))&#10;                )&#10;&#10;                // Story button&#10;                Box(&#10;                    contentAlignment = Alignment.Center,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .fillMaxHeight()&#10;                        .background(&#10;                            color = if (selectedPostType == &quot;Story&quot;) Color(0xFFFF4D4D) else Color.Transparent,&#10;                            shape = RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp)&#10;                        )&#10;                        .clip(RoundedCornerShape(topEnd = 24.dp, bottomEnd = 24.dp))&#10;                        .clickable { selectedPostType = &quot;Story&quot; }&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Story&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/MainScreenContainer.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/MainScreenContainer.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.components.*&#10;import android.location.Location&#10;&#10;@Composable&#10;fun MainScreenContainer(&#10;    currentLocation: Location?,&#10;    nearbySecrets: List&lt;Secret&gt;,&#10;    currentUser: User?,&#10;    mySecrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    onSecretClick: (Secret) -&gt; Unit,&#10;    onDropSecretClick: () -&gt; Unit,&#10;    onSignOut: () -&gt; Unit,&#10;    onUpdateProfile: (String, String, android.net.Uri?) -&gt; Unit,&#10;    onLikeClick: (Secret) -&gt; Unit = {},&#10;    onLoadMySecrets: () -&gt; Unit = {},&#10;    onLocationPermissionGranted: () -&gt; Unit = {}&#10;) {&#10;    var currentDestination by remember { mutableStateOf(NavDestination.HOME) }&#10;    var focusedSecret by remember { mutableStateOf&lt;Secret?&gt;(null) }&#10;&#10;    // Load user secrets when profile is accessed&#10;    LaunchedEffect(currentDestination) {&#10;        if (currentDestination == NavDestination.PROFILE) {&#10;            onLoadMySecrets()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Content based on current destination&#10;        when (currentDestination) {&#10;            NavDestination.HOME -&gt; {&#10;                FeedScreen(&#10;                    nearbySecrets = nearbySecrets,&#10;                    isLoading = isLoading,&#10;                    currentUser = currentUser,&#10;                    onSecretClick = onSecretClick,&#10;                    onDropSecretClick = onDropSecretClick,&#10;                    onProfileClick = { currentDestination = NavDestination.PROFILE },&#10;                    onLikeClick = onLikeClick,&#10;                    onMapClick = { secret -&gt;&#10;                        focusedSecret = secret&#10;                        currentDestination = NavDestination.MAP&#10;                    }&#10;                )&#10;            }&#10;&#10;            NavDestination.MAP -&gt; {&#10;                MapScreen(&#10;                    currentLocation = currentLocation,&#10;                    nearbySecrets = nearbySecrets,&#10;                    onSecretClick = onSecretClick,&#10;                    onLocationPermissionGranted = onLocationPermissionGranted&#10;                )&#10;            }&#10;&#10;            NavDestination.CREATE -&gt; {&#10;                // This is handled by navigation to DropSecretScreen&#10;                // So this case should never be reached as we navigate away&#10;            }&#10;&#10;            NavDestination.TRENDS -&gt; {&#10;                TrendsScreen(&#10;                    onProfileClick = { currentDestination = NavDestination.PROFILE }&#10;                )&#10;            }&#10;&#10;            NavDestination.PROFILE -&gt; {&#10;                ProfileScreen(&#10;                    user = currentUser,&#10;                    mySecrets = mySecrets,&#10;                    onSignOut = onSignOut,&#10;                    onUpdateProfile = onUpdateProfile,&#10;                    onMySecretsClick = {&#10;                        // TODO: Navigate to MySecrets if needed&#10;                    },&#10;                    onBackClick = {&#10;                        currentDestination = NavDestination.HOME&#10;                    },&#10;                    isLoading = isLoading&#10;                )&#10;            }&#10;        }&#10;&#10;        // Bottom Navigation Bar - Always visible&#10;        BottomNavigationBar(&#10;            currentDestination = currentDestination,&#10;            onNavigate = { destination -&gt;&#10;                when (destination) {&#10;                    NavDestination.HOME -&gt; {&#10;                        currentDestination = NavDestination.HOME&#10;                    }&#10;                    NavDestination.MAP -&gt; {&#10;                        currentDestination = NavDestination.MAP&#10;                    }&#10;                    NavDestination.CREATE -&gt; {&#10;                        onDropSecretClick()&#10;                    }&#10;                    NavDestination.TRENDS -&gt; {&#10;                        currentDestination = NavDestination.TRENDS&#10;                    }&#10;                    NavDestination.PROFILE -&gt; {&#10;                        currentDestination = NavDestination.PROFILE&#10;                    }&#10;                }&#10;            },&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.components.*&#10;import android.location.Location&#10;&#10;@Composable&#10;fun MainScreenContainer(&#10;    currentLocation: Location?,&#10;    nearbySecrets: List&lt;Secret&gt;,&#10;    currentUser: User?,&#10;    mySecrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    onSecretClick: (Secret) -&gt; Unit,&#10;    onDropSecretClick: () -&gt; Unit,&#10;    onSignOut: () -&gt; Unit,&#10;    onUpdateProfile: (String, String, android.net.Uri?) -&gt; Unit,&#10;    onLikeClick: (Secret) -&gt; Unit = {},&#10;    onLoadMySecrets: () -&gt; Unit = {},&#10;    onLocationPermissionGranted: () -&gt; Unit = {},&#10;    onPostSecret: ((String, android.net.Uri?, Boolean, String?, String?, String?) -&gt; Unit)? = null,&#10;    cacheDir: java.io.File? = null&#10;) {&#10;    var currentDestination by remember { mutableStateOf(NavDestination.HOME) }&#10;    var focusedSecret by remember { mutableStateOf&lt;Secret?&gt;(null) }&#10;&#10;    // Load user secrets when profile is accessed&#10;    LaunchedEffect(currentDestination) {&#10;        if (currentDestination == NavDestination.PROFILE) {&#10;            onLoadMySecrets()&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Content based on current destination&#10;        when (currentDestination) {&#10;            NavDestination.HOME -&gt; {&#10;                FeedScreen(&#10;                    nearbySecrets = nearbySecrets,&#10;                    isLoading = isLoading,&#10;                    currentUser = currentUser,&#10;                    onSecretClick = onSecretClick,&#10;                    onDropSecretClick = { currentDestination = NavDestination.CREATE },&#10;                    onProfileClick = { currentDestination = NavDestination.PROFILE },&#10;                    onLikeClick = onLikeClick,&#10;                    onMapClick = { secret -&gt;&#10;                        focusedSecret = secret&#10;                        currentDestination = NavDestination.MAP&#10;                    }&#10;                )&#10;            }&#10;&#10;            NavDestination.MAP -&gt; {&#10;                MapScreen(&#10;                    currentLocation = currentLocation,&#10;                    nearbySecrets = nearbySecrets,&#10;                    onSecretClick = onSecretClick,&#10;                    onLocationPermissionGranted = onLocationPermissionGranted&#10;                )&#10;            }&#10;&#10;            NavDestination.CREATE -&gt; {&#10;                DropSecretScreen(&#10;                    isLoading = isLoading,&#10;                    onPostSecret = { text, imageUri, isAnonymous, mood, category, hashtags -&gt;&#10;                        onPostSecret?.invoke(text, imageUri, isAnonymous, mood, category, hashtags)&#10;                        currentDestination = NavDestination.HOME&#10;                    },&#10;                    onBack = {&#10;                        currentDestination = NavDestination.HOME&#10;                    },&#10;                    cacheDir = cacheDir,&#10;                    currentUser = currentUser&#10;                )&#10;            }&#10;&#10;            NavDestination.TRENDS -&gt; {&#10;                TrendsScreen(&#10;                    onProfileClick = { currentDestination = NavDestination.PROFILE }&#10;                )&#10;            }&#10;&#10;            NavDestination.PROFILE -&gt; {&#10;                ProfileScreen(&#10;                    user = currentUser,&#10;                    mySecrets = mySecrets,&#10;                    onSignOut = onSignOut,&#10;                    onUpdateProfile = onUpdateProfile,&#10;                    onMySecretsClick = {&#10;                        // TODO: Navigate to MySecrets if needed&#10;                    },&#10;                    onBackClick = {&#10;                        currentDestination = NavDestination.HOME&#10;                    },&#10;                    isLoading = isLoading&#10;                )&#10;            }&#10;        }&#10;&#10;        // Bottom Navigation Bar - Always visible&#10;        BottomNavigationBar(&#10;            currentDestination = currentDestination,&#10;            onNavigate = { destination -&gt;&#10;                when (destination) {&#10;                    NavDestination.HOME -&gt; {&#10;                        currentDestination = NavDestination.HOME&#10;                    }&#10;                    NavDestination.MAP -&gt; {&#10;                        currentDestination = NavDestination.MAP&#10;                    }&#10;                    NavDestination.CREATE -&gt; {&#10;                        currentDestination = NavDestination.CREATE&#10;                    }&#10;                    NavDestination.TRENDS -&gt; {&#10;                        currentDestination = NavDestination.TRENDS&#10;                    }&#10;                    NavDestination.PROFILE -&gt; {&#10;                        currentDestination = NavDestination.PROFILE&#10;                    }&#10;                }&#10;            },&#10;            modifier = Modifier.align(Alignment.BottomCenter)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/MySecretsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/MySecretsScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.ui.components.*&#10;import com.secretspaces32.android.ui.theme.*&#10;import com.secretspaces32.android.utils.LocationHelper&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MySecretsScreen(&#10;    secrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    onSecretClick: (Secret) -&gt; Unit&#10;) {&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Animated gradient background&#10;        AnimatedGradientBackground(modifier = Modifier.fillMaxSize())&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkSurface.copy(alpha = 0.95f),&#10;                tonalElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .statusBarsPadding()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Mine&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;&#10;                    // Stats badge&#10;                    Surface(&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        color = TealPrimary.copy(alpha = 0.2f)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.titleMedium&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secrets.size} secrets&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = TealPrimary,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Secrets List&#10;            if (isLoading &amp;&amp; secrets.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(32.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            color = TealPrimary,&#10;                            strokeWidth = 4.dp&#10;                        )&#10;                        Text(&#10;                            text = &quot;Loading your secrets...&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            } else if (secrets.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(32.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    GlassmorphicCard {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.displayLarge&#10;                            )&#10;                            Text(&#10;                                text = &quot;No secrets yet&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                color = Color.White&#10;                            )&#10;                            Text(&#10;                                text = &quot;Start dropping secrets on the map!&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = Color.White.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(&#10;                        start = 16.dp,&#10;                        end = 16.dp,&#10;                        top = 16.dp,&#10;                        bottom = 96.dp&#10;                    ),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Summary card&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .shadow(&#10;                                    elevation = 12.dp,&#10;                                    shape = RoundedCornerShape(24.dp),&#10;                                    ambientColor = TealPrimary.copy(alpha = 0.3f)&#10;                                ),&#10;                            shape = RoundedCornerShape(24.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = DarkSurface.copy(alpha = 0.95f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(20.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Your Secret Stats&quot;,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    color = Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                                ) {&#10;                                    StatItem(&#10;                                        icon = &quot;❤️&quot;,&#10;                                        value = secrets.sumOf { it.likeCount },&#10;                                        label = &quot;Total Likes&quot;,&#10;                                        color = CoralPink&#10;                                    )&#10;&#10;                                    StatItem(&#10;                                        icon = &quot;&quot;,&#10;                                        value = secrets.sumOf { it.commentCount },&#10;                                        label = &quot;Comments&quot;,&#10;                                        color = SoftBlue&#10;                                    )&#10;&#10;                                    StatItem(&#10;                                        icon = &quot;️&quot;,&#10;                                        value = secrets.size,&#10;                                        label = &quot;Secrets&quot;,&#10;                                        color = TealPrimary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Secrets list&#10;                    items(&#10;                        items = secrets.sortedByDescending { it.timestamp },&#10;                        key = { it.id }&#10;                    ) { secret -&gt;&#10;                        AnimatedVisibility(&#10;                            visible = true,&#10;                            enter = fadeIn() + slideInVertically(),&#10;                            exit = fadeOut() + slideOutVertically()&#10;                        ) {&#10;                            MySecretCard(&#10;                                secret = secret,&#10;                                onClick = { onSecretClick(secret) }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bottom padding&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    icon: String,&#10;    value: Int,&#10;    label: String,&#10;    color: Color&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Surface(&#10;            shape = RoundedCornerShape(16.dp),&#10;            color = color.copy(alpha = 0.15f)&#10;        ) {&#10;            Text(&#10;                text = icon,&#10;                modifier = Modifier.padding(16.dp),&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;        }&#10;        Text(&#10;            text = value.toString(),&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = color,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = Color.White.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun MySecretCard(&#10;    secret: Secret,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .shadow(&#10;                elevation = 12.dp,&#10;                shape = RoundedCornerShape(24.dp),&#10;                ambientColor = TealPrimary.copy(alpha = 0.2f),&#10;                spotColor = AquaGreen.copy(alpha = 0.2f)&#10;            ),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = DarkSurface.copy(alpha = 0.95f)&#10;        ),&#10;        onClick = onClick&#10;    ) {&#10;        Box {&#10;            // Gradient accent on top&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(4.dp)&#10;                    .background(&#10;                        brush = Brush.horizontalGradient(&#10;                            colors = listOf(DeepPurple, CoralPink, TealPrimary)&#10;                        )&#10;                    )&#10;            )&#10;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(20.dp)&#10;            ) {&#10;                // Timestamp and status&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        if (secret.isAnonymous) {&#10;                            PremiumBadge(&#10;                                text = &quot;️ Anonymous&quot;,&#10;                                color = LavenderMist&#10;                            )&#10;                        } else {&#10;                            PremiumBadge(&#10;                                text = &quot; Public&quot;,&#10;                                color = TealPrimary&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Text(&#10;                        text = LocationHelper.formatTimestamp(secret.timestamp),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = Color.White.copy(alpha = 0.6f)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                // Secret text&#10;                Text(&#10;                    text = secret.text,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = Color.White,&#10;                    maxLines = 3&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                GradientDivider()&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Engagement stats&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Surface(&#10;                        color = CoralPink.copy(alpha = 0.15f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = &quot;Likes&quot;,&#10;                                tint = CoralPink,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secret.likeCount}&quot;,&#10;                                style = MaterialTheme.typography.labelLarge,&#10;                                color = CoralPink&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Surface(&#10;                        color = SoftBlue.copy(alpha = 0.15f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.ChatBubble,&#10;                                contentDescription = &quot;Comments&quot;,&#10;                                tint = SoftBlue,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secret.commentCount}&quot;,&#10;                                style = MaterialTheme.typography.labelLarge,&#10;                                color = SoftBlue&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // View details arrow&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                    Icon(&#10;                        imageVector = Icons.Default.ChevronRight,&#10;                        contentDescription = &quot;View details&quot;,&#10;                        tint = TealPrimary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.ui.components.*&#10;import com.secretspaces32.android.ui.theme.*&#10;import com.secretspaces32.android.utils.LocationHelper&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MySecretsScreen(&#10;    secrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    onSecretClick: (Secret) -&gt; Unit&#10;) {&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Animated gradient background&#10;        AnimatedGradientBackground(modifier = Modifier.fillMaxSize())&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkSurface.copy(alpha = 0.95f),&#10;                tonalElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .statusBarsPadding()&#10;                        .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Mine&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;&#10;                    // Stats badge&#10;                    Surface(&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        color = TealPrimary.copy(alpha = 0.2f)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.titleMedium&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secrets.size} secrets&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = TealPrimary,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Secrets List&#10;            if (isLoading &amp;&amp; secrets.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(32.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            color = TealPrimary,&#10;                            strokeWidth = 4.dp&#10;                        )&#10;                        Text(&#10;                            text = &quot;Loading your secrets...&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            } else if (secrets.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(32.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    GlassmorphicCard {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.displayLarge&#10;                            )&#10;                            Text(&#10;                                text = &quot;No secrets yet&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                color = Color.White&#10;                            )&#10;                            Text(&#10;                                text = &quot;Start dropping secrets on the map!&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = Color.White.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(&#10;                        start = 16.dp,&#10;                        end = 16.dp,&#10;                        top = 16.dp,&#10;                        bottom = 96.dp&#10;                    ),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Summary card&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .shadow(&#10;                                    elevation = 12.dp,&#10;                                    shape = RoundedCornerShape(24.dp),&#10;                                    ambientColor = TealPrimary.copy(alpha = 0.3f)&#10;                                ),&#10;                            shape = RoundedCornerShape(24.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = DarkSurface.copy(alpha = 0.95f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(20.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Your Secret Stats&quot;,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    color = Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                                ) {&#10;                                    StatItem(&#10;                                        icon = &quot;❤️&quot;,&#10;                                        value = secrets.sumOf { it.likeCount },&#10;                                        label = &quot;Total Likes&quot;,&#10;                                        color = CoralPink&#10;                                    )&#10;&#10;                                    StatItem(&#10;                                        icon = &quot;&quot;,&#10;                                        value = secrets.sumOf { it.commentCount },&#10;                                        label = &quot;Comments&quot;,&#10;                                        color = SoftBlue&#10;                                    )&#10;&#10;                                    StatItem(&#10;                                        icon = &quot;️&quot;,&#10;                                        value = secrets.size,&#10;                                        label = &quot;Secrets&quot;,&#10;                                        color = TealPrimary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Secrets list&#10;                    items(&#10;                        items = secrets.sortedByDescending { it.timestamp },&#10;                        key = { it.id }&#10;                    ) { secret -&gt;&#10;                        AnimatedVisibility(&#10;                            visible = true,&#10;                            enter = fadeIn() + slideInVertically(),&#10;                            exit = fadeOut() + slideOutVertically()&#10;                        ) {&#10;                            MySecretCard(&#10;                                secret = secret,&#10;                                onClick = { onSecretClick(secret) }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bottom padding&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    icon: String,&#10;    value: Int,&#10;    label: String,&#10;    color: Color&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Surface(&#10;            shape = RoundedCornerShape(16.dp),&#10;            color = color.copy(alpha = 0.15f)&#10;        ) {&#10;            Text(&#10;                text = icon,&#10;                modifier = Modifier.padding(16.dp),&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;        }&#10;        Text(&#10;            text = value.toString(),&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = color,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = Color.White.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun MySecretCard(&#10;    secret: Secret,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .shadow(&#10;                elevation = 12.dp,&#10;                shape = RoundedCornerShape(24.dp),&#10;                ambientColor = TealPrimary.copy(alpha = 0.2f),&#10;                spotColor = AquaGreen.copy(alpha = 0.2f)&#10;            ),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = DarkSurface.copy(alpha = 0.95f)&#10;        ),&#10;        onClick = onClick&#10;    ) {&#10;        Box {&#10;            // Gradient accent on top&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(4.dp)&#10;                    .background(&#10;                        brush = Brush.horizontalGradient(&#10;                            colors = listOf(DeepPurple, CoralPink, TealPrimary)&#10;                        )&#10;                    )&#10;            )&#10;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(20.dp)&#10;            ) {&#10;                // Timestamp and status&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        if (secret.isAnonymous) {&#10;                            PremiumBadge(&#10;                                text = &quot;️ Anonymous&quot;,&#10;                                color = LavenderMist&#10;                            )&#10;                        } else {&#10;                            PremiumBadge(&#10;                                text = &quot; Public&quot;,&#10;                                color = TealPrimary&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Text(&#10;                        text = LocationHelper.formatTimestamp(secret.timestamp),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = Color.White.copy(alpha = 0.6f)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                // Secret text&#10;                Text(&#10;                    text = secret.text,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = Color.White,&#10;                    maxLines = 3&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                GradientDivider()&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Engagement stats&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Surface(&#10;                        color = CoralPink.copy(alpha = 0.15f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = &quot;Likes&quot;,&#10;                                tint = CoralPink,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secret.likeCount}&quot;,&#10;                                style = MaterialTheme.typography.labelLarge,&#10;                                color = CoralPink&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Surface(&#10;                        color = SoftBlue.copy(alpha = 0.15f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.ChatBubble,&#10;                                contentDescription = &quot;Comments&quot;,&#10;                                tint = SoftBlue,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secret.commentCount}&quot;,&#10;                                style = MaterialTheme.typography.labelLarge,&#10;                                color = SoftBlue&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // View details arrow&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                    Icon(&#10;                        imageVector = Icons.Default.ChevronRight,&#10;                        contentDescription = &quot;View details&quot;,&#10;                        tint = TealPrimary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/ProfileScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    user: User?,&#10;    mySecrets: List&lt;Secret&gt; = emptyList(),&#10;    onSignOut: () -&gt; Unit,&#10;    onUpdateProfile: (username: String, bio: String, imageUri: Uri?) -&gt; Unit,&#10;    onMySecretsClick: () -&gt; Unit = {},&#10;    onBackClick: () -&gt; Unit = {},&#10;    isLoading: Boolean = false&#10;) {&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var username by remember { mutableStateOf(user?.username ?: &quot;&quot;) }&#10;    var bio by remember { mutableStateOf(user?.bio ?: &quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    LaunchedEffect(user) {&#10;        username = user?.username ?: &quot;&quot;&#10;        bio = user?.bio ?: &quot;&quot;&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF0C0C0C))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(horizontal = 20.dp, vertical = 12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;&#10;            // ---- TOP BAR ----&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .statusBarsPadding()&#10;                    .padding(vertical = 8.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = Color(0xFFFF4D4D)&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = &quot;Profile&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                IconButton(onClick = onSignOut) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Logout,&#10;                        contentDescription = &quot;Sign out&quot;,&#10;                        tint = Color(0xFFFF4D4D)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // ---- PROFILE PICTURE ----&#10;            Box(&#10;                modifier = Modifier.size(120.dp)&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .background(Color(0xFFFF4D4D).copy(alpha = 0.15f), shape = CircleShape)&#10;                        .border(2.dp, Color(0xFFFF4D4D), CircleShape)&#10;                        .clip(CircleShape)&#10;                ) {&#10;                    if (selectedImageUri != null || user?.profilePictureUrl != null) {&#10;                        AsyncImage(&#10;                            model = selectedImageUri ?: user?.profilePictureUrl,&#10;                            contentDescription = &quot;Profile picture&quot;,&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;                    } else {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile&quot;,&#10;                            modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .padding(24.dp),&#10;                            tint = Color(0xFFFF4D4D)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                if (isEditMode) {&#10;                    IconButton(&#10;                        onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                        modifier = Modifier&#10;                            .align(Alignment.BottomEnd)&#10;                            .size(36.dp)&#10;                    ) {&#10;                        Surface(&#10;                            shape = CircleShape,&#10;                            color = Color(0xFFFF4D4D)&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Edit,&#10;                                contentDescription = &quot;Edit photo&quot;,&#10;                                tint = Color.White,&#10;                                modifier = Modifier.padding(8.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // ---- USER INFO ----&#10;            AnimatedContent(&#10;                targetState = isEditMode,&#10;                transitionSpec = {&#10;                    fadeIn() + expandVertically() togetherWith fadeOut() + shrinkVertically()&#10;                },&#10;                label = &quot;userInfoAnimation&quot;&#10;            ) { editMode -&gt;&#10;                if (editMode) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Edit Profile&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Color.White,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;&#10;                        OutlinedTextField(&#10;                            value = username,&#10;                            onValueChange = { username = it },&#10;                            label = { Text(&quot;Username&quot;, color = Color.White.copy(alpha = 0.8f)) },&#10;                            leadingIcon = { Icon(Icons.Default.Person, null, tint = Color(0xFFFF4D4D)) },&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = Color(0xFFFF4D4D),&#10;                                unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#10;                                focusedLabelColor = Color(0xFFFF4D4D),&#10;                                unfocusedLabelColor = Color.White.copy(alpha = 0.7f),&#10;                                cursorColor = Color.White,&#10;                                focusedTextColor = Color.White,&#10;                                unfocusedTextColor = Color.White,&#10;                                focusedPlaceholderColor = Color.White.copy(alpha = 0.5f),&#10;                                unfocusedPlaceholderColor = Color.White.copy(alpha = 0.5f)&#10;                            )&#10;                        )&#10;&#10;                        OutlinedTextField(&#10;                            value = bio,&#10;                            onValueChange = { bio = it },&#10;                            label = { Text(&quot;Bio&quot;, color = Color.White.copy(alpha = 0.8f)) },&#10;                            placeholder = { Text(&quot;Tell something about yourself&quot;, color = Color.White.copy(alpha = 0.5f)) },&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .heightIn(min = 100.dp),&#10;                            colors = OutlinedTextFieldDefaults.colors(&#10;                                focusedBorderColor = Color(0xFFFF4D4D),&#10;                                unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#10;                                focusedLabelColor = Color(0xFFFF4D4D),&#10;                                unfocusedLabelColor = Color.White.copy(alpha = 0.7f),&#10;                                cursorColor = Color.White,&#10;                                focusedTextColor = Color.White,&#10;                                unfocusedTextColor = Color.White,&#10;                                focusedPlaceholderColor = Color.White.copy(alpha = 0.5f),&#10;                                unfocusedPlaceholderColor = Color.White.copy(alpha = 0.5f)&#10;                            )&#10;                        )&#10;&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            OutlinedButton(&#10;                                onClick = {&#10;                                    isEditMode = false&#10;                                    username = user?.username ?: &quot;&quot;&#10;                                    bio = user?.bio ?: &quot;&quot;&#10;                                    selectedImageUri = null&#10;                                },&#10;                                modifier = Modifier.weight(1f),&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            ) {&#10;                                Text(&quot;Cancel&quot;)&#10;                            }&#10;&#10;                            Button(&#10;                                onClick = {&#10;                                    onUpdateProfile(username, bio, selectedImageUri)&#10;                                    isEditMode = false&#10;                                },&#10;                                modifier = Modifier.weight(1f),&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                enabled = username.isNotBlank(),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = Color(0xFFFF4D4D)&#10;                                )&#10;                            ) {&#10;                                if (isLoading) {&#10;                                    CircularProgressIndicator(&#10;                                        modifier = Modifier.size(20.dp),&#10;                                        color = Color.White,&#10;                                        strokeWidth = 2.dp&#10;                                    )&#10;                                } else {&#10;                                    Text(&quot;Save&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = user?.username ?: &quot;User Name&quot;,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;&#10;                        if (!bio.isNullOrBlank()) {&#10;                            Text(&#10;                                text = bio,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = Color.White.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Button(&#10;                            onClick = { isEditMode = true },&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF4D4D))&#10;                        ) {&#10;                            Icon(Icons.Default.Edit, contentDescription = null)&#10;                            Spacer(modifier = Modifier.width(6.dp))&#10;                            Text(&quot;Edit Profile&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // ---- STATS SECTION ----&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), RoundedCornerShape(16.dp))&#10;                    .padding(20.dp),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                StatItem(&quot;Posts&quot;, &quot;42&quot;)&#10;                StatItem(&quot;Followers&quot;, &quot;200&quot;)&#10;                StatItem(&quot;Following&quot;, &quot;180&quot;)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // ---- SECRETS SECTION ----&#10;            SectionBox(title = &quot;My Secrets&quot;) {&#10;                if (mySecrets.isEmpty()) {&#10;                    Text(&#10;                        text = &quot;No secrets yet.&quot;,&#10;                        color = Color.White.copy(alpha = 0.7f)&#10;                    )&#10;                } else {&#10;                    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                        mySecrets.take(3).forEach {&#10;                            SecretCard(it.text)&#10;                        }&#10;                        TextButton(onClick = onMySecretsClick) {&#10;                            Text(&quot;View All&quot;, color = Color(0xFFFF4D4D))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;}&#10;&#10;// --- Helper Composables ---&#10;&#10;@Composable&#10;fun StatItem(label: String, value: String) {&#10;    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.White&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = Color.White.copy(alpha = 0.6f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionBox(title: String, content: @Composable ColumnScope.() -&gt; Unit) {&#10;    Surface(&#10;        shape = RoundedCornerShape(16.dp),&#10;        border = BorderStroke(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f)),&#10;        color = Color(0xFF121212)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.Bold,&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;            content()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SecretCard(text: String) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        color = Color(0xFF1C1C1C),&#10;        border = BorderStroke(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.15f))&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            color = Color.White,&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.*&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(&#10;    user: User?,&#10;    mySecrets: List&lt;Secret&gt; = emptyList(),&#10;    onSignOut: () -&gt; Unit,&#10;    onUpdateProfile: (username: String, bio: String, imageUri: Uri?) -&gt; Unit,&#10;    onMySecretsClick: () -&gt; Unit = {},&#10;    onBackClick: () -&gt; Unit = {},&#10;    isLoading: Boolean = false&#10;) {&#10;    var isEditMode by remember { mutableStateOf(false) }&#10;    var username by remember { mutableStateOf(user?.username ?: &quot;&quot;) }&#10;    var bio by remember { mutableStateOf(user?.bio ?: &quot;&quot;) }&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri: Uri? -&gt;&#10;        selectedImageUri = uri&#10;    }&#10;&#10;    LaunchedEffect(user) {&#10;        username = user?.username ?: &quot;&quot;&#10;        bio = user?.bio ?: &quot;&quot;&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF0C0C0C))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;        ) {&#10;            // ---- TOP BAR ----&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = Color(0xFF0C0C0C),&#10;                shadowElevation = 4.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .statusBarsPadding()&#10;                        .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Profile&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        color = Color.White,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    IconButton(onClick = onSignOut) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Logout,&#10;                            contentDescription = &quot;Sign out&quot;,&#10;                            tint = Color(0xFFFF4D4D)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Scrollable content&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .verticalScroll(rememberScrollState())&#10;                    .padding(horizontal = 20.dp, vertical = 12.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // ---- PROFILE PICTURE ----&#10;                Box(&#10;                    modifier = Modifier.size(120.dp)&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background(Color(0xFFFF4D4D).copy(alpha = 0.15f), shape = CircleShape)&#10;                            .border(2.dp, Color(0xFFFF4D4D), CircleShape)&#10;                            .clip(CircleShape)&#10;                    ) {&#10;                        if (selectedImageUri != null || user?.profilePictureUrl != null) {&#10;                            AsyncImage(&#10;                                model = selectedImageUri ?: user?.profilePictureUrl,&#10;                                contentDescription = &quot;Profile picture&quot;,&#10;                                modifier = Modifier.fillMaxSize(),&#10;                                contentScale = ContentScale.Crop&#10;                            )&#10;                        } else {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = &quot;Profile&quot;,&#10;                                modifier = Modifier&#10;                                    .fillMaxSize()&#10;                                    .padding(24.dp),&#10;                                tint = Color(0xFFFF4D4D)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    if (isEditMode) {&#10;                        IconButton(&#10;                            onClick = { imagePickerLauncher.launch(&quot;image/*&quot;) },&#10;                            modifier = Modifier&#10;                                .align(Alignment.BottomEnd)&#10;                                .size(36.dp)&#10;                        ) {&#10;                            Surface(&#10;                                shape = CircleShape,&#10;                                color = Color(0xFFFF4D4D)&#10;                            ) {&#10;                                Icon(&#10;                                    Icons.Default.Edit,&#10;                                    contentDescription = &quot;Edit photo&quot;,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // ---- USER INFO ----&#10;                AnimatedContent(&#10;                    targetState = isEditMode,&#10;                    transitionSpec = {&#10;                        fadeIn() + expandVertically() togetherWith fadeOut() + shrinkVertically()&#10;                    },&#10;                    label = &quot;userInfoAnimation&quot;&#10;                ) { editMode -&gt;&#10;                    if (editMode) {&#10;                        Column(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Edit Profile&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = Color.White,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;&#10;                            OutlinedTextField(&#10;                                value = username,&#10;                                onValueChange = { username = it },&#10;                                label = { Text(&quot;Username&quot;, color = Color.White.copy(alpha = 0.8f)) },&#10;                                leadingIcon = { Icon(Icons.Default.Person, null, tint = Color(0xFFFF4D4D)) },&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = OutlinedTextFieldDefaults.colors(&#10;                                    focusedBorderColor = Color(0xFFFF4D4D),&#10;                                    unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#10;                                    focusedLabelColor = Color(0xFFFF4D4D),&#10;                                    unfocusedLabelColor = Color.White.copy(alpha = 0.7f),&#10;                                    cursorColor = Color.White,&#10;                                    focusedTextColor = Color.White,&#10;                                    unfocusedTextColor = Color.White,&#10;                                    focusedPlaceholderColor = Color.White.copy(alpha = 0.5f),&#10;                                    unfocusedPlaceholderColor = Color.White.copy(alpha = 0.5f)&#10;                                )&#10;                            )&#10;&#10;                            OutlinedTextField(&#10;                                value = bio,&#10;                                onValueChange = { bio = it },&#10;                                label = { Text(&quot;Bio&quot;, color = Color.White.copy(alpha = 0.8f)) },&#10;                                placeholder = { Text(&quot;Tell something about yourself&quot;, color = Color.White.copy(alpha = 0.5f)) },&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .heightIn(min = 100.dp),&#10;                                colors = OutlinedTextFieldDefaults.colors(&#10;                                    focusedBorderColor = Color(0xFFFF4D4D),&#10;                                    unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#10;                                    focusedLabelColor = Color(0xFFFF4D4D),&#10;                                    unfocusedLabelColor = Color.White.copy(alpha = 0.7f),&#10;                                    cursorColor = Color.White,&#10;                                    focusedTextColor = Color.White,&#10;                                    unfocusedTextColor = Color.White,&#10;                                    focusedPlaceholderColor = Color.White.copy(alpha = 0.5f),&#10;                                    unfocusedPlaceholderColor = Color.White.copy(alpha = 0.5f)&#10;                                )&#10;                            )&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                            ) {&#10;                                OutlinedButton(&#10;                                    onClick = {&#10;                                        isEditMode = false&#10;                                        username = user?.username ?: &quot;&quot;&#10;                                        bio = user?.bio ?: &quot;&quot;&#10;                                        selectedImageUri = null&#10;                                    },&#10;                                    modifier = Modifier.weight(1f),&#10;                                    shape = RoundedCornerShape(12.dp)&#10;                                ) {&#10;                                    Text(&quot;Cancel&quot;)&#10;                                }&#10;&#10;                                Button(&#10;                                    onClick = {&#10;                                        onUpdateProfile(username, bio, selectedImageUri)&#10;                                        isEditMode = false&#10;                                    },&#10;                                    modifier = Modifier.weight(1f),&#10;                                    shape = RoundedCornerShape(12.dp),&#10;                                    enabled = username.isNotBlank(),&#10;                                    colors = ButtonDefaults.buttonColors(&#10;                                        containerColor = Color(0xFFFF4D4D)&#10;                                    )&#10;                                ) {&#10;                                    if (isLoading) {&#10;                                        CircularProgressIndicator(&#10;                                            modifier = Modifier.size(20.dp),&#10;                                            color = Color.White,&#10;                                            strokeWidth = 2.dp&#10;                                        )&#10;                                    } else {&#10;                                        Text(&quot;Save&quot;)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = user?.username ?: &quot;User Name&quot;,&#10;                                style = MaterialTheme.typography.headlineMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.White&#10;                            )&#10;&#10;                            if (!bio.isNullOrBlank()) {&#10;                                Text(&#10;                                    text = bio,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = Color.White.copy(alpha = 0.7f)&#10;                                )&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                            Button(&#10;                                onClick = { isEditMode = true },&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFFF4D4D))&#10;                            ) {&#10;                                Icon(Icons.Default.Edit, contentDescription = null)&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&quot;Edit Profile&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // ---- STATS SECTION ----&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), RoundedCornerShape(16.dp))&#10;                        .padding(20.dp),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                ) {&#10;                    StatItem(&quot;Posts&quot;, &quot;42&quot;)&#10;                    StatItem(&quot;Followers&quot;, &quot;200&quot;)&#10;                    StatItem(&quot;Following&quot;, &quot;180&quot;)&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // ---- SECRETS SECTION ----&#10;                SectionBox(title = &quot;My Secrets&quot;) {&#10;                    if (mySecrets.isEmpty()) {&#10;                        Text(&#10;                            text = &quot;No secrets yet.&quot;,&#10;                            color = Color.White.copy(alpha = 0.7f)&#10;                        )&#10;                    } else {&#10;                        Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                            mySecrets.take(3).forEach {&#10;                                SecretCard(it.text)&#10;                            }&#10;                            TextButton(onClick = onMySecretsClick) {&#10;                                Text(&quot;View All&quot;, color = Color(0xFFFF4D4D))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// --- Helper Composables ---&#10;&#10;@Composable&#10;fun StatItem(label: String, value: String) {&#10;    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.White&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = Color.White.copy(alpha = 0.6f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionBox(title: String, content: @Composable ColumnScope.() -&gt; Unit) {&#10;    Surface(&#10;        shape = RoundedCornerShape(16.dp),&#10;        border = BorderStroke(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f)),&#10;        color = Color(0xFF121212)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.Bold,&#10;                style = MaterialTheme.typography.titleMedium&#10;            )&#10;            content()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SecretCard(text: String) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        color = Color(0xFF1C1C1C),&#10;        border = BorderStroke(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.15f))&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            color = Color.White,&#10;            modifier = Modifier.padding(16.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/SecretDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/SecretDetailScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.Comment&#10;import com.secretspaces32.android.data.model.Like&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.utils.LocationHelper&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SecretDetailScreen(&#10;    secret: Secret,&#10;    comments: List&lt;Comment&gt;,&#10;    likes: List&lt;Like&gt;,&#10;    isLikedByCurrentUser: Boolean,&#10;    onLikeClick: () -&gt; Unit,&#10;    onCommentSubmit: (String) -&gt; Unit,&#10;    onBack: () -&gt; Unit,&#10;    isLoading: Boolean = false&#10;) {&#10;    var commentText by remember { mutableStateOf(&quot;&quot;) }&#10;    var showLikes by remember { mutableStateOf(false) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF0C0C0C))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top Bar&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .statusBarsPadding()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onBack) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = Color(0xFFFF4D4D)&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = &quot;Secret Details&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White&#10;                )&#10;&#10;                // Placeholder for symmetry&#10;                Box(modifier = Modifier.size(48.dp))&#10;            }&#10;&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .weight(1f),&#10;                contentPadding = PaddingValues(&#10;                    start = 16.dp,&#10;                    end = 16.dp,&#10;                    top = 16.dp,&#10;                    bottom = 96.dp&#10;                ),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Secret Content Card&#10;                item {&#10;                    Surface(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        color = Color(0xFF121212),&#10;                        border = androidx.compose.foundation.BorderStroke(&#10;                            1.dp,&#10;                            Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp)&#10;                        ) {&#10;                            // User info&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(40.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(Color(0xFF1C1C1C))&#10;                                        .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    if (secret.userProfilePicture != null) {&#10;                                        AsyncImage(&#10;                                            model = secret.userProfilePicture,&#10;                                            contentDescription = &quot;Profile&quot;,&#10;                                            modifier = Modifier.fillMaxSize(),&#10;                                            contentScale = ContentScale.Crop&#10;                                        )&#10;                                    } else {&#10;                                        Icon(&#10;                                            imageVector = Icons.Default.Person,&#10;                                            contentDescription = &quot;Profile&quot;,&#10;                                            tint = Color(0xFFFF4D4D),&#10;                                            modifier = Modifier.size(24.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Column {&#10;                                    Text(&#10;                                        text = secret.username,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White&#10;                                    )&#10;                                    Text(&#10;                                        text = LocationHelper.formatTimestamp(secret.timestamp),&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Color.White.copy(alpha = 0.6f)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                            // Secret text&#10;                            Text(&#10;                                text = secret.text,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = Color.White&#10;                            )&#10;&#10;                            // Image if available&#10;                            secret.imageUrl?.let { imageUrl -&gt;&#10;                                Spacer(modifier = Modifier.height(12.dp))&#10;                                AsyncImage(&#10;                                    model = imageUrl,&#10;                                    contentDescription = &quot;Secret image&quot;,&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .heightIn(max = 400.dp)&#10;                                        .clip(RoundedCornerShape(12.dp)),&#10;                                    contentScale = ContentScale.Crop&#10;                                )&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                            // Location&#10;                            secret.distance?.let { distance -&gt;&#10;                                Row(&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.LocationOn,&#10;                                        contentDescription = null,&#10;                                        tint = Color(0xFFFF4D4D),&#10;                                        modifier = Modifier.size(16.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = LocationHelper.formatDistance(distance) + &quot; away&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Color(0xFFFF4D4D)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Like and Comment Actions&#10;                item {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        // Like Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = if (isLikedByCurrentUser)&#10;                                Color(0xFFFF4D4D)&#10;                            else&#10;                                Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                if (isLikedByCurrentUser)&#10;                                    Color(0xFFFF4D4D)&#10;                                else&#10;                                    Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            ),&#10;                            onClick = onLikeClick&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (isLikedByCurrentUser)&#10;                                        Icons.Default.Favorite&#10;                                    else&#10;                                        Icons.Default.FavoriteBorder,&#10;                                    contentDescription = &quot;Like&quot;,&#10;                                    tint = if (isLikedByCurrentUser)&#10;                                        Color.White&#10;                                    else&#10;                                        Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;${secret.likeCount}&quot;,&#10;                                    color = if (isLikedByCurrentUser)&#10;                                        Color.White&#10;                                    else&#10;                                        Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Comment Count Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Comment,&#10;                                    contentDescription = &quot;Comments&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;${secret.commentCount}&quot;,&#10;                                    color = Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // View Likes Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            ),&#10;                            onClick = { showLikes = true }&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Visibility,&#10;                                    contentDescription = &quot;View Likes&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Comments Header&#10;                item {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Comments&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = &quot;(${comments.size})&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Comments List&#10;                if (comments.isEmpty()) {&#10;                    item {&#10;                        Surface(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.15f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(24.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Comment,&#10;                                    contentDescription = null,&#10;                                    tint = Color.White.copy(alpha = 0.3f),&#10;                                    modifier = Modifier.size(48.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Text(&#10;                                    text = &quot;No comments yet&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.White.copy(alpha = 0.6f)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Be the first to comment!&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = Color.White.copy(alpha = 0.4f)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    items(comments) { comment -&gt;&#10;                        CommentItem(comment = comment)&#10;                    }&#10;                }&#10;&#10;                // Bottom spacing&#10;                item {&#10;                    Spacer(modifier = Modifier.height(80.dp))&#10;                }&#10;            }&#10;&#10;            // Comment Input (Fixed at bottom)&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = Color(0xFF121212),&#10;                shadowElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    verticalAlignment = Alignment.Bottom&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = commentText,&#10;                        onValueChange = { commentText = it },&#10;                        modifier = Modifier.weight(1f),&#10;                        placeholder = {&#10;                            Text(&#10;                                &quot;Add a comment...&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f)&#10;                            )&#10;                        },&#10;                        maxLines = 3,&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Color(0xFFFF4D4D),&#10;                            unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White&#10;                        )&#10;                    )&#10;&#10;                    Surface(&#10;                        shape = CircleShape,&#10;                        color = if (commentText.isNotBlank())&#10;                            Color(0xFFFF4D4D)&#10;                        else&#10;                            Color(0xFF1C1C1C),&#10;                        onClick = {&#10;                            if (commentText.isNotBlank() &amp;&amp; !isLoading) {&#10;                                onCommentSubmit(commentText)&#10;                                commentText = &quot;&quot;&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.Send,&#10;                            contentDescription = &quot;Send&quot;,&#10;                            tint = if (commentText.isNotBlank())&#10;                                Color.White&#10;                            else&#10;                                Color.White.copy(alpha = 0.3f),&#10;                            modifier = Modifier&#10;                                .padding(12.dp)&#10;                                .size(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Likes Dialog&#10;    if (showLikes) {&#10;        AlertDialog(&#10;            onDismissRequest = { showLikes = false },&#10;            containerColor = Color(0xFF121212),&#10;            title = {&#10;                Text(&#10;                    &quot;Likes (${likes.size})&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            text = {&#10;                if (likes.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.FavoriteBorder,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.3f),&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;No likes yet&quot;,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        modifier = Modifier.heightIn(max = 400.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        items(likes) { like -&gt;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(vertical = 8.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    Icons.Default.Favorite,&#10;                                    contentDescription = null,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Text(&#10;                                    like.username,&#10;                                    color = Color.White,&#10;                                    style = MaterialTheme.typography.bodyLarge&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = { showLikes = false }&#10;                ) {&#10;                    Text(&quot;Close&quot;, color = Color(0xFFFF4D4D))&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CommentItem(comment: Comment) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        color = Color(0xFF1C1C1C),&#10;        border = androidx.compose.foundation.BorderStroke(&#10;            1.dp,&#10;            Color(0xFFFF4D4D).copy(alpha = 0.15f)&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp)&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFF0C0C0C))&#10;                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (comment.userProfilePicture != null) {&#10;                    AsyncImage(&#10;                        model = comment.userProfilePicture,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        tint = Color(0xFFFF4D4D),&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = comment.username,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                    Text(&#10;                        text = LocationHelper.formatTimestamp(comment.timestamp),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.White.copy(alpha = 0.5f)&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(6.dp))&#10;                Text(&#10;                    text = comment.text,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.White.copy(alpha = 0.9f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.Comment&#10;import com.secretspaces32.android.data.model.Like&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.utils.LocationHelper&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SecretDetailScreen(&#10;    secret: Secret,&#10;    comments: List&lt;Comment&gt;,&#10;    likes: List&lt;Like&gt;,&#10;    isLikedByCurrentUser: Boolean,&#10;    onLikeClick: () -&gt; Unit,&#10;    onCommentSubmit: (String) -&gt; Unit,&#10;    onBack: () -&gt; Unit,&#10;    isLoading: Boolean = false&#10;) {&#10;    var commentText by remember { mutableStateOf(&quot;&quot;) }&#10;    var showLikes by remember { mutableStateOf(false) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF0C0C0C))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top Bar&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .statusBarsPadding()&#10;                    .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onBack) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = Color(0xFFFF4D4D)&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = &quot;Secret Details&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White&#10;                )&#10;&#10;                // Placeholder for symmetry&#10;                Box(modifier = Modifier.size(48.dp))&#10;            }&#10;&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .weight(1f),&#10;                contentPadding = PaddingValues(&#10;                    start = 16.dp,&#10;                    end = 16.dp,&#10;                    top = 16.dp,&#10;                    bottom = 96.dp&#10;                ),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Secret Content Card&#10;                item {&#10;                    Surface(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        color = Color(0xFF121212),&#10;                        border = androidx.compose.foundation.BorderStroke(&#10;                            1.dp,&#10;                            Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp)&#10;                        ) {&#10;                            // User info&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(40.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(Color(0xFF1C1C1C))&#10;                                        .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    if (secret.userProfilePicture != null) {&#10;                                        AsyncImage(&#10;                                            model = secret.userProfilePicture,&#10;                                            contentDescription = &quot;Profile&quot;,&#10;                                            modifier = Modifier.fillMaxSize(),&#10;                                            contentScale = ContentScale.Crop&#10;                                        )&#10;                                    } else {&#10;                                        Icon(&#10;                                            imageVector = Icons.Default.Person,&#10;                                            contentDescription = &quot;Profile&quot;,&#10;                                            tint = Color(0xFFFF4D4D),&#10;                                            modifier = Modifier.size(24.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Column {&#10;                                    Text(&#10;                                        text = secret.username,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White&#10;                                    )&#10;                                    Text(&#10;                                        text = LocationHelper.formatTimestamp(secret.timestamp),&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Color.White.copy(alpha = 0.6f)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                            // Secret text&#10;                            Text(&#10;                                text = secret.text,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = Color.White&#10;                            )&#10;&#10;                            // Image if available&#10;                            secret.imageUrl?.let { imageUrl -&gt;&#10;                                Spacer(modifier = Modifier.height(12.dp))&#10;                                AsyncImage(&#10;                                    model = imageUrl,&#10;                                    contentDescription = &quot;Secret image&quot;,&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .heightIn(max = 400.dp)&#10;                                        .clip(RoundedCornerShape(12.dp)),&#10;                                    contentScale = ContentScale.Crop&#10;                                )&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                            // Location&#10;                            secret.distance?.let { distance -&gt;&#10;                                Row(&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.LocationOn,&#10;                                        contentDescription = null,&#10;                                        tint = Color(0xFFFF4D4D),&#10;                                        modifier = Modifier.size(16.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = LocationHelper.formatDistance(distance) + &quot; away&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Color(0xFFFF4D4D)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Like and Comment Actions&#10;                item {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        // Like Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = if (isLikedByCurrentUser)&#10;                                Color(0xFFFF4D4D)&#10;                            else&#10;                                Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                if (isLikedByCurrentUser)&#10;                                    Color(0xFFFF4D4D)&#10;                                else&#10;                                    Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            ),&#10;                            onClick = onLikeClick&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (isLikedByCurrentUser)&#10;                                        Icons.Default.Favorite&#10;                                    else&#10;                                        Icons.Default.FavoriteBorder,&#10;                                    contentDescription = &quot;Like&quot;,&#10;                                    tint = if (isLikedByCurrentUser)&#10;                                        Color.White&#10;                                    else&#10;                                        Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;${secret.likeCount}&quot;,&#10;                                    color = if (isLikedByCurrentUser)&#10;                                        Color.White&#10;                                    else&#10;                                        Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Comment Count Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Comment,&#10;                                    contentDescription = &quot;Comments&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;${secret.commentCount}&quot;,&#10;                                    color = Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // View Likes Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            ),&#10;                            onClick = { showLikes = true }&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Visibility,&#10;                                    contentDescription = &quot;View Likes&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Comments Header&#10;                item {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Comments&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = &quot;(${comments.size})&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Comments List&#10;                if (comments.isEmpty()) {&#10;                    item {&#10;                        Surface(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.15f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(24.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Comment,&#10;                                    contentDescription = null,&#10;                                    tint = Color.White.copy(alpha = 0.3f),&#10;                                    modifier = Modifier.size(48.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Text(&#10;                                    text = &quot;No comments yet&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.White.copy(alpha = 0.6f)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Be the first to comment!&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = Color.White.copy(alpha = 0.4f)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    items(comments) { comment -&gt;&#10;                        CommentItem(comment = comment)&#10;                    }&#10;                }&#10;&#10;                // Bottom spacing&#10;                item {&#10;                    Spacer(modifier = Modifier.height(80.dp))&#10;                }&#10;            }&#10;&#10;            // Comment Input (Fixed at bottom)&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = Color(0xFF121212),&#10;                shadowElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    verticalAlignment = Alignment.Bottom&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = commentText,&#10;                        onValueChange = { commentText = it },&#10;                        modifier = Modifier.weight(1f),&#10;                        placeholder = {&#10;                            Text(&#10;                                &quot;Add a comment...&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f)&#10;                            )&#10;                        },&#10;                        maxLines = 3,&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Color(0xFFFF4D4D),&#10;                            unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White&#10;                        )&#10;                    )&#10;&#10;                    Surface(&#10;                        shape = CircleShape,&#10;                        color = if (commentText.isNotBlank())&#10;                            Color(0xFFFF4D4D)&#10;                        else&#10;                            Color(0xFF1C1C1C),&#10;                        onClick = {&#10;                            if (commentText.isNotBlank() &amp;&amp; !isLoading) {&#10;                                onCommentSubmit(commentText)&#10;                                commentText = &quot;&quot;&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.Send,&#10;                            contentDescription = &quot;Send&quot;,&#10;                            tint = if (commentText.isNotBlank())&#10;                                Color.White&#10;                            else&#10;                                Color.White.copy(alpha = 0.3f),&#10;                            modifier = Modifier&#10;                                .padding(12.dp)&#10;                                .size(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Likes Dialog&#10;    if (showLikes) {&#10;        AlertDialog(&#10;            onDismissRequest = { showLikes = false },&#10;            containerColor = Color(0xFF121212),&#10;            title = {&#10;                Text(&#10;                    &quot;Likes (${likes.size})&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            text = {&#10;                if (likes.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.FavoriteBorder,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.3f),&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;No likes yet&quot;,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        modifier = Modifier.heightIn(max = 400.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        items(likes) { like -&gt;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(vertical = 8.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    Icons.Default.Favorite,&#10;                                    contentDescription = null,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Text(&#10;                                    like.username,&#10;                                    color = Color.White,&#10;                                    style = MaterialTheme.typography.bodyLarge&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = { showLikes = false }&#10;                ) {&#10;                    Text(&quot;Close&quot;, color = Color(0xFFFF4D4D))&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CommentItem(comment: Comment) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        color = Color(0xFF1C1C1C),&#10;        border = androidx.compose.foundation.BorderStroke(&#10;            1.dp,&#10;            Color(0xFFFF4D4D).copy(alpha = 0.15f)&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp)&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFF0C0C0C))&#10;                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (comment.userProfilePicture != null) {&#10;                    AsyncImage(&#10;                        model = comment.userProfilePicture,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        tint = Color(0xFFFF4D4D),&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = comment.username,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                    Text(&#10;                        text = LocationHelper.formatTimestamp(comment.timestamp),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.White.copy(alpha = 0.5f)&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(6.dp))&#10;                Text(&#10;                    text = comment.text,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.White.copy(alpha = 0.9f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/TrendsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/TrendsScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;@Composable&#10;fun TrendsScreen(&#10;    onProfileClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Top bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .statusBarsPadding()&#10;                .padding(horizontal = 20.dp, vertical = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Title&#10;            Text(&#10;                text = &quot;Trending&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;&#10;            IconButton(&#10;                onClick = onProfileClick,&#10;                modifier = Modifier&#10;                    .size(42.dp)&#10;                    .background(DarkSurface.copy(alpha = 0.9f), CircleShape)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.AccountCircle,&#10;                    contentDescription = &quot;Profile&quot;,&#10;                    tint = TealPrimary,&#10;                    modifier = Modifier.size(26.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Coming soon placeholder&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.TrendingUp,&#10;                    contentDescription = null,&#10;                    tint = TealPrimary,&#10;                    modifier = Modifier.size(80.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Trending Coming Soon&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Discover what's popular in your area&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = Color.White.copy(alpha = 0.6f)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Preview cards showing what's coming&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(containerColor = DarkSurface),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot; Coming Features:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TealPrimary,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        TrendFeatureItem(&quot; Hottest Secrets&quot;)&#10;                        TrendFeatureItem(&quot; Trending Locations&quot;)&#10;                        TrendFeatureItem(&quot; Top Contributors&quot;)&#10;                        TrendFeatureItem(&quot; Daily Statistics&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TrendFeatureItem(text: String) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.Start,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = Color.White.copy(alpha = 0.8f)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;@Composable&#10;fun TrendsScreen(&#10;    onProfileClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Top bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .statusBarsPadding()&#10;                .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Title&#10;            Text(&#10;                text = &quot;Trending&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;&#10;            IconButton(&#10;                onClick = onProfileClick,&#10;                modifier = Modifier&#10;                    .size(42.dp)&#10;                    .background(DarkSurface.copy(alpha = 0.9f), CircleShape)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.AccountCircle,&#10;                    contentDescription = &quot;Profile&quot;,&#10;                    tint = TealPrimary,&#10;                    modifier = Modifier.size(26.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Coming soon placeholder&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.TrendingUp,&#10;                    contentDescription = null,&#10;                    tint = TealPrimary,&#10;                    modifier = Modifier.size(80.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Trending Coming Soon&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Discover what's popular in your area&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = Color.White.copy(alpha = 0.6f)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Preview cards showing what's coming&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(containerColor = DarkSurface),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot; Coming Features:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = TealPrimary,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        TrendFeatureItem(&quot; Hottest Secrets&quot;)&#10;                        TrendFeatureItem(&quot; Trending Locations&quot;)&#10;                        TrendFeatureItem(&quot; Top Contributors&quot;)&#10;                        TrendFeatureItem(&quot; Daily Statistics&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TrendFeatureItem(text: String) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.Start,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = Color.White.copy(alpha = 0.8f)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>