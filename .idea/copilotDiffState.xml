<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/FeedScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/FeedScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.location.Location&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.outlined.Comment&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material.icons.outlined.Notifications&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.components.*&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;&#10;// Story data class&#10;data class Story(&#10;    val id: String,&#10;    val username: String,&#10;    val profilePicture: String?,&#10;    val hasUnseenStory: Boolean = false,&#10;    val isYourStory: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun FeedScreen(&#10;    nearbySecrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    currentUser: User? = null,&#10;    friendsWithStories: List&lt;Story&gt; = emptyList(),&#10;    onSecretClick: (Secret) -&gt; Unit,&#10;    onDropSecretClick: () -&gt; Unit,&#10;    onProfileClick: () -&gt; Unit,&#10;    onLikeClick: (Secret) -&gt; Unit = {},&#10;    onMapClick: (Secret) -&gt; Unit = {},&#10;    onNotificationsClick: () -&gt; Unit = {},&#10;    onMessagesClick: () -&gt; Unit = {},&#10;    onStoryClick: (Story) -&gt; Unit = {},&#10;    onAddStoryClick: () -&gt; Unit = {}&#10;) {&#10;    val lazyListState = rememberLazyListState()&#10;&#10;    // Build stories list: &quot;Your Story&quot; + friends' stories&#10;    val stories = remember(currentUser, friendsWithStories) {&#10;        buildList {&#10;            // Always add &quot;Your Story&quot; first&#10;            add(&#10;                Story(&#10;                    id = currentUser?.id ?: &quot;your&quot;,&#10;                    username = &quot;Your Story&quot;,&#10;                    profilePicture = currentUser?.profilePictureUrl,&#10;                    hasUnseenStory = false,&#10;                    isYourStory = true&#10;                )&#10;            )&#10;            // Add friends' stories&#10;            addAll(friendsWithStories)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Header&#10;        Surface(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = DarkBackground,&#10;            shadowElevation = 4.dp&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Home&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = onNotificationsClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                    IconButton(onClick = onMessagesClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Forum,&#10;                            contentDescription = &quot;Messages&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Stories Section - Only show if there are stories to display&#10;        if (stories.isNotEmpty()) {&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground&#10;            ) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(stories) { story -&gt;&#10;                        StoryItem(&#10;                            story = story,&#10;                            onClick = {&#10;                                if (story.isYourStory) {&#10;                                    onAddStoryClick()&#10;                                } else {&#10;                                    onStoryClick(story)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Divider&#10;            HorizontalDivider(&#10;                color = Color.White.copy(alpha = 0.1f),&#10;                thickness = 0.5.dp&#10;            )&#10;        }&#10;&#10;        // Content&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 120.dp&#10;                        )&#10;                    ) {&#10;                        items(5) {&#10;                            ShimmerFeedCard()&#10;                        }&#10;                    }&#10;                }&#10;&#10;                nearbySecrets.isEmpty() -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, style = MaterialTheme.typography.displayMedium)&#10;                            Text(&#10;                                text = &quot;No secrets nearby&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = Color.White,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = &quot;Be the first to drop one!&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = Color.White.copy(alpha = 0.6f)&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Button(&#10;                                onClick = onDropSecretClick,&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = TealPrimary&#10;                                ),&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Add,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&quot;Drop Secret&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 120.dp&#10;                        )&#10;                    ) {&#10;                        items(nearbySecrets, key = { it.id }) { secret -&gt;&#10;                            FeedSecretCard(&#10;                                secret = secret,&#10;                                onLikeClick = { onLikeClick(it) },&#10;                                onCommentClick = { onSecretClick(it) },&#10;                                onMapClick = { onMapClick(it) },&#10;                                onCardClick = { onSecretClick(it) }&#10;                            )&#10;                        }&#10;&#10;                        // Infinite scroll indicator&#10;                        if (nearbySecrets.size &gt;= 10) {&#10;                            item {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(vertical = 16.dp),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        color = TealPrimary,&#10;                                        modifier = Modifier.size(32.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryItem(&#10;    story: Story,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(6.dp),&#10;        modifier = Modifier&#10;            .width(70.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Box(&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Story Ring&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(66.dp)&#10;                    .border(&#10;                        width = 2.5.dp,&#10;                        brush = if (story.hasUnseenStory) {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    TealPrimary,&#10;                                    Color(0xFF8B5CF6),&#10;                                    Color(0xFFEC4899)&#10;                                )&#10;                            )&#10;                        } else {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    Color.White.copy(alpha = 0.3f),&#10;                                    Color.White.copy(alpha = 0.3f)&#10;                                )&#10;                            )&#10;                        },&#10;                        shape = CircleShape&#10;                    )&#10;            )&#10;&#10;            // Profile Picture&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(60.dp)&#10;                    .clip(CircleShape)&#10;                    .background(DarkSurface),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (story.profilePicture != null) {&#10;                    AsyncImage(&#10;                        model = story.profilePicture,&#10;                        contentDescription = story.username,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = if (story.isYourStory) Icons.Default.AccountCircle else Icons.Default.Person,&#10;                        contentDescription = story.username,&#10;                        tint = Color.White.copy(alpha = 0.7f),&#10;                        modifier = Modifier.size(36.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Add icon for &quot;Your Story&quot;&#10;            if (story.isYourStory) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(20.dp)&#10;                        .align(Alignment.BottomEnd)&#10;                        .offset(x = (-2).dp, y = (-2).dp)&#10;                        .clip(CircleShape)&#10;                        .background(TealPrimary)&#10;                        .border(2.dp, DarkBackground, CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Story&quot;,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(14.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Username&#10;        Text(&#10;            text = story.username,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = Color.White,&#10;            fontSize = 11.sp,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Ellipsis,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import android.location.Location&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.outlined.Comment&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material.icons.outlined.Notifications&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.data.model.User&#10;import com.secretspaces32.android.ui.components.*&#10;import com.secretspaces32.android.ui.theme.*&#10;&#10;&#10;// Story data class&#10;data class Story(&#10;    val id: String,&#10;    val username: String,&#10;    val profilePicture: String?,&#10;    val hasUnseenStory: Boolean = false,&#10;    val isYourStory: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun FeedScreen(&#10;    nearbySecrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    currentUser: User? = null,&#10;    friendsWithStories: List&lt;Story&gt; = emptyList(),&#10;    onSecretClick: (Secret) -&gt; Unit,&#10;    onDropSecretClick: () -&gt; Unit,&#10;    onProfileClick: () -&gt; Unit,&#10;    onLikeClick: (Secret) -&gt; Unit = {},&#10;    onMapClick: (Secret) -&gt; Unit = {},&#10;    onNotificationsClick: () -&gt; Unit = {},&#10;    onMessagesClick: () -&gt; Unit = {},&#10;    onStoryClick: (Story) -&gt; Unit = {},&#10;    onAddStoryClick: () -&gt; Unit = {}&#10;) {&#10;    val lazyListState = rememberLazyListState()&#10;&#10;    // Build stories list: &quot;Your Story&quot; + friends' stories&#10;    val stories = remember(currentUser, friendsWithStories) {&#10;        buildList {&#10;            // Always add &quot;Your Story&quot; first&#10;            add(&#10;                Story(&#10;                    id = currentUser?.id ?: &quot;your&quot;,&#10;                    username = &quot;Your Story&quot;,&#10;                    profilePicture = currentUser?.profilePictureUrl,&#10;                    hasUnseenStory = false,&#10;                    isYourStory = true&#10;                )&#10;            )&#10;            // Add friends' stories&#10;            addAll(friendsWithStories)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(DarkBackground)&#10;    ) {&#10;        // Header&#10;        Surface(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            color = DarkBackground,&#10;            shadowElevation = 4.dp&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(start = 36.dp, end = 20.dp, top = 16.dp, bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Home&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    IconButton(onClick = onNotificationsClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Outlined.Notifications,&#10;                            contentDescription = &quot;Notifications&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                    IconButton(onClick = onMessagesClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Forum,&#10;                            contentDescription = &quot;Messages&quot;,&#10;                            tint = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Stories Section - Only show if there are stories to display&#10;        if (stories.isNotEmpty()) {&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkBackground&#10;            ) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(stories) { story -&gt;&#10;                        StoryItem(&#10;                            story = story,&#10;                            onClick = {&#10;                                if (story.isYourStory) {&#10;                                    onAddStoryClick()&#10;                                } else {&#10;                                    onStoryClick(story)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Divider&#10;            HorizontalDivider(&#10;                color = Color.White.copy(alpha = 0.1f),&#10;                thickness = 0.5.dp&#10;            )&#10;        }&#10;&#10;        // Content&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 96.dp&#10;                        )&#10;                    ) {&#10;                        items(5) {&#10;                            ShimmerFeedCard()&#10;                        }&#10;                    }&#10;                }&#10;&#10;                nearbySecrets.isEmpty() -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .padding(32.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Text(&quot;&quot;, style = MaterialTheme.typography.displayMedium)&#10;                            Text(&#10;                                text = &quot;No secrets nearby&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = Color.White,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                            Text(&#10;                                text = &quot;Be the first to drop one!&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = Color.White.copy(alpha = 0.6f)&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Button(&#10;                                onClick = onDropSecretClick,&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = TealPrimary&#10;                                ),&#10;                                shape = RoundedCornerShape(12.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Add,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&quot;Drop Secret&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        state = lazyListState,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(&#10;                            start = 20.dp,&#10;                            end = 20.dp,&#10;                            top = 20.dp,&#10;                            bottom = 96.dp&#10;                        )&#10;                    ) {&#10;                        items(nearbySecrets, key = { it.id }) { secret -&gt;&#10;                            FeedSecretCard(&#10;                                secret = secret,&#10;                                onLikeClick = { onLikeClick(it) },&#10;                                onCommentClick = { onSecretClick(it) },&#10;                                onMapClick = { onMapClick(it) },&#10;                                onCardClick = { onSecretClick(it) }&#10;                            )&#10;                        }&#10;&#10;                        // Infinite scroll indicator&#10;                        if (nearbySecrets.size &gt;= 10) {&#10;                            item {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(vertical = 16.dp),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(&#10;                                        color = TealPrimary,&#10;                                        modifier = Modifier.size(32.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StoryItem(&#10;    story: Story,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(6.dp),&#10;        modifier = Modifier&#10;            .width(70.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Box(&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Story Ring&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(66.dp)&#10;                    .border(&#10;                        width = 2.5.dp,&#10;                        brush = if (story.hasUnseenStory) {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    TealPrimary,&#10;                                    Color(0xFF8B5CF6),&#10;                                    Color(0xFFEC4899)&#10;                                )&#10;                            )&#10;                        } else {&#10;                            Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    Color.White.copy(alpha = 0.3f),&#10;                                    Color.White.copy(alpha = 0.3f)&#10;                                )&#10;                            )&#10;                        },&#10;                        shape = CircleShape&#10;                    )&#10;            )&#10;&#10;            // Profile Picture&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(60.dp)&#10;                    .clip(CircleShape)&#10;                    .background(DarkSurface),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (story.profilePicture != null) {&#10;                    AsyncImage(&#10;                        model = story.profilePicture,&#10;                        contentDescription = story.username,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = if (story.isYourStory) Icons.Default.AccountCircle else Icons.Default.Person,&#10;                        contentDescription = story.username,&#10;                        tint = Color.White.copy(alpha = 0.7f),&#10;                        modifier = Modifier.size(36.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Add icon for &quot;Your Story&quot;&#10;            if (story.isYourStory) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(20.dp)&#10;                        .align(Alignment.BottomEnd)&#10;                        .offset(x = (-2).dp, y = (-2).dp)&#10;                        .clip(CircleShape)&#10;                        .background(TealPrimary)&#10;                        .border(2.dp, DarkBackground, CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Story&quot;,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(14.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Username&#10;        Text(&#10;            text = story.username,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = Color.White,&#10;            fontSize = 11.sp,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Ellipsis,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/MySecretsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/MySecretsScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.shadow&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.ui.components.*&#10;import com.secretspaces32.android.ui.theme.*&#10;import com.secretspaces32.android.utils.LocationHelper&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MySecretsScreen(&#10;    secrets: List&lt;Secret&gt;,&#10;    isLoading: Boolean,&#10;    onSecretClick: (Secret) -&gt; Unit&#10;) {&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Animated gradient background&#10;        AnimatedGradientBackground(modifier = Modifier.fillMaxSize())&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Top Bar&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = DarkSurface.copy(alpha = 0.95f),&#10;                tonalElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .statusBarsPadding()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Mine&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;&#10;                    // Stats badge&#10;                    Surface(&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        color = TealPrimary.copy(alpha = 0.2f)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.titleMedium&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secrets.size} secrets&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = TealPrimary,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Secrets List&#10;            if (isLoading &amp;&amp; secrets.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(32.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            color = TealPrimary,&#10;                            strokeWidth = 4.dp&#10;                        )&#10;                        Text(&#10;                            text = &quot;Loading your secrets...&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                }&#10;            } else if (secrets.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(32.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    GlassmorphicCard {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.displayLarge&#10;                            )&#10;                            Text(&#10;                                text = &quot;No secrets yet&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                color = Color.White&#10;                            )&#10;                            Text(&#10;                                text = &quot;Start dropping secrets on the map!&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = Color.White.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Summary card&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .shadow(&#10;                                    elevation = 12.dp,&#10;                                    shape = RoundedCornerShape(24.dp),&#10;                                    ambientColor = TealPrimary.copy(alpha = 0.3f)&#10;                                ),&#10;                            shape = RoundedCornerShape(24.dp),&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = DarkSurface.copy(alpha = 0.95f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(20.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Your Secret Stats&quot;,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    color = Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                                ) {&#10;                                    StatItem(&#10;                                        icon = &quot;❤️&quot;,&#10;                                        value = secrets.sumOf { it.likeCount },&#10;                                        label = &quot;Total Likes&quot;,&#10;                                        color = CoralPink&#10;                                    )&#10;&#10;                                    StatItem(&#10;                                        icon = &quot;&quot;,&#10;                                        value = secrets.sumOf { it.commentCount },&#10;                                        label = &quot;Comments&quot;,&#10;                                        color = SoftBlue&#10;                                    )&#10;&#10;                                    StatItem(&#10;                                        icon = &quot;️&quot;,&#10;                                        value = secrets.size,&#10;                                        label = &quot;Secrets&quot;,&#10;                                        color = TealPrimary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Secrets list&#10;                    items(&#10;                        items = secrets.sortedByDescending { it.timestamp },&#10;                        key = { it.id }&#10;                    ) { secret -&gt;&#10;                        AnimatedVisibility(&#10;                            visible = true,&#10;                            enter = fadeIn() + slideInVertically(),&#10;                            exit = fadeOut() + slideOutVertically()&#10;                        ) {&#10;                            MySecretCard(&#10;                                secret = secret,&#10;                                onClick = { onSecretClick(secret) }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bottom padding&#10;                    item {&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    icon: String,&#10;    value: Int,&#10;    label: String,&#10;    color: Color&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        Surface(&#10;            shape = RoundedCornerShape(16.dp),&#10;            color = color.copy(alpha = 0.15f)&#10;        ) {&#10;            Text(&#10;                text = icon,&#10;                modifier = Modifier.padding(16.dp),&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;        }&#10;        Text(&#10;            text = value.toString(),&#10;            style = MaterialTheme.typography.titleLarge,&#10;            color = color,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = Color.White.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun MySecretCard(&#10;    secret: Secret,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .shadow(&#10;                elevation = 12.dp,&#10;                shape = RoundedCornerShape(24.dp),&#10;                ambientColor = TealPrimary.copy(alpha = 0.2f),&#10;                spotColor = AquaGreen.copy(alpha = 0.2f)&#10;            ),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = DarkSurface.copy(alpha = 0.95f)&#10;        ),&#10;        onClick = onClick&#10;    ) {&#10;        Box {&#10;            // Gradient accent on top&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(4.dp)&#10;                    .background(&#10;                        brush = Brush.horizontalGradient(&#10;                            colors = listOf(DeepPurple, CoralPink, TealPrimary)&#10;                        )&#10;                    )&#10;            )&#10;&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(20.dp)&#10;            ) {&#10;                // Timestamp and status&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        if (secret.isAnonymous) {&#10;                            PremiumBadge(&#10;                                text = &quot;️ Anonymous&quot;,&#10;                                color = LavenderMist&#10;                            )&#10;                        } else {&#10;                            PremiumBadge(&#10;                                text = &quot; Public&quot;,&#10;                                color = TealPrimary&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Text(&#10;                        text = LocationHelper.formatTimestamp(secret.timestamp),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = Color.White.copy(alpha = 0.6f)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                // Secret text&#10;                Text(&#10;                    text = secret.text,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = Color.White,&#10;                    maxLines = 3&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                GradientDivider()&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Engagement stats&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Surface(&#10;                        color = CoralPink.copy(alpha = 0.15f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Favorite,&#10;                                contentDescription = &quot;Likes&quot;,&#10;                                tint = CoralPink,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secret.likeCount}&quot;,&#10;                                style = MaterialTheme.typography.labelLarge,&#10;                                color = CoralPink&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Surface(&#10;                        color = SoftBlue.copy(alpha = 0.15f),&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.ChatBubble,&#10;                                contentDescription = &quot;Comments&quot;,&#10;                                tint = SoftBlue,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${secret.commentCount}&quot;,&#10;                                style = MaterialTheme.typography.labelLarge,&#10;                                color = SoftBlue&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // View details arrow&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                    Icon(&#10;                        imageVector = Icons.Default.ChevronRight,&#10;                        contentDescription = &quot;View details&quot;,&#10;                        tint = TealPrimary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#13;&#10;&#13;&#10;import androidx.compose.animation.*&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.shadow&#13;&#10;import androidx.compose.ui.graphics.Brush&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import com.secretspaces32.android.data.model.Secret&#13;&#10;import com.secretspaces32.android.ui.components.*&#13;&#10;import com.secretspaces32.android.ui.theme.*&#13;&#10;import com.secretspaces32.android.utils.LocationHelper&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun MySecretsScreen(&#13;&#10;    secrets: List&lt;Secret&gt;,&#13;&#10;    isLoading: Boolean,&#13;&#10;    onSecretClick: (Secret) -&gt; Unit&#13;&#10;) {&#13;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#13;&#10;        // Animated gradient background&#13;&#10;        AnimatedGradientBackground(modifier = Modifier.fillMaxSize())&#13;&#10;&#13;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#13;&#10;            // Top Bar&#13;&#10;            Surface(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                color = DarkSurface.copy(alpha = 0.95f),&#13;&#10;                tonalElevation = 8.dp&#13;&#10;            ) {&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .statusBarsPadding()&#13;&#10;                        .padding(16.dp),&#13;&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                    verticalAlignment = Alignment.CenterVertically&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Mine&quot;,&#13;&#10;                        style = MaterialTheme.typography.headlineMedium,&#13;&#10;                        fontWeight = FontWeight.Bold,&#13;&#10;                        color = Color.White&#13;&#10;                    )&#13;&#10;&#13;&#10;                    // Stats badge&#13;&#10;                    Surface(&#13;&#10;                        shape = RoundedCornerShape(16.dp),&#13;&#10;                        color = TealPrimary.copy(alpha = 0.2f)&#13;&#10;                    ) {&#13;&#10;                        Row(&#13;&#10;                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp),&#13;&#10;                            verticalAlignment = Alignment.CenterVertically&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = &quot;&quot;,&#13;&#10;                                style = MaterialTheme.typography.titleMedium&#13;&#10;                            )&#13;&#10;                            Text(&#13;&#10;                                text = &quot;${secrets.size} secrets&quot;,&#13;&#10;                                style = MaterialTheme.typography.titleSmall,&#13;&#10;                                color = TealPrimary,&#13;&#10;                                fontWeight = FontWeight.Bold&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Secrets List&#13;&#10;            if (isLoading &amp;&amp; secrets.isEmpty()) {&#13;&#10;                Box(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxSize()&#13;&#10;                        .padding(32.dp),&#13;&#10;                    contentAlignment = Alignment.Center&#13;&#10;                ) {&#13;&#10;                    Column(&#13;&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;                    ) {&#13;&#10;                        CircularProgressIndicator(&#13;&#10;                            modifier = Modifier.size(48.dp),&#13;&#10;                            color = TealPrimary,&#13;&#10;                            strokeWidth = 4.dp&#13;&#10;                        )&#13;&#10;                        Text(&#13;&#10;                            text = &quot;Loading your secrets...&quot;,&#13;&#10;                            style = MaterialTheme.typography.titleMedium,&#13;&#10;                            color = Color.White&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            } else if (secrets.isEmpty()) {&#13;&#10;                Box(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxSize()&#13;&#10;                        .padding(32.dp),&#13;&#10;                    contentAlignment = Alignment.Center&#13;&#10;                ) {&#13;&#10;                    GlassmorphicCard {&#13;&#10;                        Column(&#13;&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;                        ) {&#13;&#10;                            Text(&#13;&#10;                                text = &quot;&quot;,&#13;&#10;                                style = MaterialTheme.typography.displayLarge&#13;&#10;                            )&#13;&#10;                            Text(&#13;&#10;                                text = &quot;No secrets yet&quot;,&#13;&#10;                                style = MaterialTheme.typography.headlineSmall,&#13;&#10;                                color = Color.White&#13;&#10;                            )&#13;&#10;                            Text(&#13;&#10;                                text = &quot;Start dropping secrets on the map!&quot;,&#13;&#10;                                style = MaterialTheme.typography.bodyLarge,&#13;&#10;                                color = Color.White.copy(alpha = 0.7f)&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            } else {&#13;&#10;                LazyColumn(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    contentPadding = PaddingValues(&#13;&#10;                        start = 16.dp,&#13;&#10;                        end = 16.dp,&#13;&#10;                        top = 16.dp,&#13;&#10;                        bottom = 96.dp&#13;&#10;                    ),&#13;&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;                ) {&#13;&#10;                    // Summary card&#13;&#10;                    item {&#13;&#10;                        Card(&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .shadow(&#13;&#10;                                    elevation = 12.dp,&#13;&#10;                                    shape = RoundedCornerShape(24.dp),&#13;&#10;                                    ambientColor = TealPrimary.copy(alpha = 0.3f)&#13;&#10;                                ),&#13;&#10;                            shape = RoundedCornerShape(24.dp),&#13;&#10;                            colors = CardDefaults.cardColors(&#13;&#10;                                containerColor = DarkSurface.copy(alpha = 0.95f)&#13;&#10;                            )&#13;&#10;                        ) {&#13;&#10;                            Column(&#13;&#10;                                modifier = Modifier&#13;&#10;                                    .fillMaxWidth()&#13;&#10;                                    .padding(20.dp)&#13;&#10;                            ) {&#13;&#10;                                Text(&#13;&#10;                                    text = &quot;Your Secret Stats&quot;,&#13;&#10;                                    style = MaterialTheme.typography.titleLarge,&#13;&#10;                                    color = Color.White,&#13;&#10;                                    fontWeight = FontWeight.Bold&#13;&#10;                                )&#13;&#10;&#13;&#10;                                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                                Row(&#13;&#10;                                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#13;&#10;                                ) {&#13;&#10;                                    StatItem(&#13;&#10;                                        icon = &quot;❤️&quot;,&#13;&#10;                                        value = secrets.sumOf { it.likeCount },&#13;&#10;                                        label = &quot;Total Likes&quot;,&#13;&#10;                                        color = CoralPink&#13;&#10;                                    )&#13;&#10;&#13;&#10;                                    StatItem(&#13;&#10;                                        icon = &quot;&quot;,&#13;&#10;                                        value = secrets.sumOf { it.commentCount },&#13;&#10;                                        label = &quot;Comments&quot;,&#13;&#10;                                        color = SoftBlue&#13;&#10;                                    )&#13;&#10;&#13;&#10;                                    StatItem(&#13;&#10;                                        icon = &quot;️&quot;,&#13;&#10;                                        value = secrets.size,&#13;&#10;                                        label = &quot;Secrets&quot;,&#13;&#10;                                        color = TealPrimary&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Secrets list&#13;&#10;                    items(&#13;&#10;                        items = secrets.sortedByDescending { it.timestamp },&#13;&#10;                        key = { it.id }&#13;&#10;                    ) { secret -&gt;&#13;&#10;                        AnimatedVisibility(&#13;&#10;                            visible = true,&#13;&#10;                            enter = fadeIn() + slideInVertically(),&#13;&#10;                            exit = fadeOut() + slideOutVertically()&#13;&#10;                        ) {&#13;&#10;                            MySecretCard(&#13;&#10;                                secret = secret,&#13;&#10;                                onClick = { onSecretClick(secret) }&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Bottom padding&#13;&#10;                    item {&#13;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;private fun StatItem(&#13;&#10;    icon: String,&#13;&#10;    value: Int,&#13;&#10;    label: String,&#13;&#10;    color: Color&#13;&#10;) {&#13;&#10;    Column(&#13;&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;    ) {&#13;&#10;        Surface(&#13;&#10;            shape = RoundedCornerShape(16.dp),&#13;&#10;            color = color.copy(alpha = 0.15f)&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = icon,&#13;&#10;                modifier = Modifier.padding(16.dp),&#13;&#10;                style = MaterialTheme.typography.headlineMedium&#13;&#10;            )&#13;&#10;        }&#13;&#10;        Text(&#13;&#10;            text = value.toString(),&#13;&#10;            style = MaterialTheme.typography.titleLarge,&#13;&#10;            color = color,&#13;&#10;            fontWeight = FontWeight.Bold&#13;&#10;        )&#13;&#10;        Text(&#13;&#10;            text = label,&#13;&#10;            style = MaterialTheme.typography.labelSmall,&#13;&#10;            color = Color.White.copy(alpha = 0.7f)&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;private fun MySecretCard(&#13;&#10;    secret: Secret,&#13;&#10;    onClick: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxWidth()&#13;&#10;            .shadow(&#13;&#10;                elevation = 12.dp,&#13;&#10;                shape = RoundedCornerShape(24.dp),&#13;&#10;                ambientColor = TealPrimary.copy(alpha = 0.2f),&#13;&#10;                spotColor = AquaGreen.copy(alpha = 0.2f)&#13;&#10;            ),&#13;&#10;        shape = RoundedCornerShape(24.dp),&#13;&#10;        colors = CardDefaults.cardColors(&#13;&#10;            containerColor = DarkSurface.copy(alpha = 0.95f)&#13;&#10;        ),&#13;&#10;        onClick = onClick&#13;&#10;    ) {&#13;&#10;        Box {&#13;&#10;            // Gradient accent on top&#13;&#10;            Box(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .height(4.dp)&#13;&#10;                    .background(&#13;&#10;                        brush = Brush.horizontalGradient(&#13;&#10;                            colors = listOf(DeepPurple, CoralPink, TealPrimary)&#13;&#10;                        )&#13;&#10;                    )&#13;&#10;            )&#13;&#10;&#13;&#10;            Column(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .padding(20.dp)&#13;&#10;            ) {&#13;&#10;                // Timestamp and status&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                    verticalAlignment = Alignment.CenterVertically&#13;&#10;                ) {&#13;&#10;                    Row(&#13;&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#13;&#10;                        verticalAlignment = Alignment.CenterVertically&#13;&#10;                    ) {&#13;&#10;                        if (secret.isAnonymous) {&#13;&#10;                            PremiumBadge(&#13;&#10;                                text = &quot;️ Anonymous&quot;,&#13;&#10;                                color = LavenderMist&#13;&#10;                            )&#13;&#10;                        } else {&#13;&#10;                            PremiumBadge(&#13;&#10;                                text = &quot; Public&quot;,&#13;&#10;                                color = TealPrimary&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Text(&#13;&#10;                        text = LocationHelper.formatTimestamp(secret.timestamp),&#13;&#10;                        style = MaterialTheme.typography.labelSmall,&#13;&#10;                        color = Color.White.copy(alpha = 0.6f)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(12.dp))&#13;&#10;&#13;&#10;                // Secret text&#13;&#10;                Text(&#13;&#10;                    text = secret.text,&#13;&#10;                    style = MaterialTheme.typography.bodyLarge,&#13;&#10;                    color = Color.White,&#13;&#10;                    maxLines = 3&#13;&#10;                )&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                GradientDivider()&#13;&#10;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                // Engagement stats&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;                ) {&#13;&#10;                    Surface(&#13;&#10;                        color = CoralPink.copy(alpha = 0.15f),&#13;&#10;                        shape = RoundedCornerShape(12.dp)&#13;&#10;                    ) {&#13;&#10;                        Row(&#13;&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#13;&#10;                            verticalAlignment = Alignment.CenterVertically,&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                imageVector = Icons.Default.Favorite,&#13;&#10;                                contentDescription = &quot;Likes&quot;,&#13;&#10;                                tint = CoralPink,&#13;&#10;                                modifier = Modifier.size(18.dp)&#13;&#10;                            )&#13;&#10;                            Text(&#13;&#10;                                text = &quot;${secret.likeCount}&quot;,&#13;&#10;                                style = MaterialTheme.typography.labelLarge,&#13;&#10;                                color = CoralPink&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Surface(&#13;&#10;                        color = SoftBlue.copy(alpha = 0.15f),&#13;&#10;                        shape = RoundedCornerShape(12.dp)&#13;&#10;                    ) {&#13;&#10;                        Row(&#13;&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#13;&#10;                            verticalAlignment = Alignment.CenterVertically,&#13;&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                imageVector = Icons.Default.ChatBubble,&#13;&#10;                                contentDescription = &quot;Comments&quot;,&#13;&#10;                                tint = SoftBlue,&#13;&#10;                                modifier = Modifier.size(18.dp)&#13;&#10;                            )&#13;&#10;                            Text(&#13;&#10;                                text = &quot;${secret.commentCount}&quot;,&#13;&#10;                                style = MaterialTheme.typography.labelLarge,&#13;&#10;                                color = SoftBlue&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // View details arrow&#13;&#10;                    Spacer(modifier = Modifier.weight(1f))&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.ChevronRight,&#13;&#10;                        contentDescription = &quot;View details&quot;,&#13;&#10;                        tint = TealPrimary,&#13;&#10;                        modifier = Modifier.size(24.dp)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/SecretDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/secretspaces32/android/ui/screens/SecretDetailScreen.kt" />
              <option name="originalContent" value="package com.secretspaces32.android.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.secretspaces32.android.data.model.Comment&#10;import com.secretspaces32.android.data.model.Like&#10;import com.secretspaces32.android.data.model.Secret&#10;import com.secretspaces32.android.utils.LocationHelper&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SecretDetailScreen(&#10;    secret: Secret,&#10;    comments: List&lt;Comment&gt;,&#10;    likes: List&lt;Like&gt;,&#10;    isLikedByCurrentUser: Boolean,&#10;    onLikeClick: () -&gt; Unit,&#10;    onCommentSubmit: (String) -&gt; Unit,&#10;    onBack: () -&gt; Unit,&#10;    isLoading: Boolean = false&#10;) {&#10;    var commentText by remember { mutableStateOf(&quot;&quot;) }&#10;    var showLikes by remember { mutableStateOf(false) }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFF0C0C0C))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Top Bar&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .statusBarsPadding()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onBack) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;,&#10;                        tint = Color(0xFFFF4D4D)&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = &quot;Secret Details&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White&#10;                )&#10;&#10;                // Placeholder for symmetry&#10;                Box(modifier = Modifier.size(48.dp))&#10;            }&#10;&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .weight(1f),&#10;                contentPadding = PaddingValues(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Secret Content Card&#10;                item {&#10;                    Surface(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        color = Color(0xFF121212),&#10;                        border = androidx.compose.foundation.BorderStroke(&#10;                            1.dp,&#10;                            Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp)&#10;                        ) {&#10;                            // User info&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(40.dp)&#10;                                        .clip(CircleShape)&#10;                                        .background(Color(0xFF1C1C1C))&#10;                                        .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    if (secret.userProfilePicture != null) {&#10;                                        AsyncImage(&#10;                                            model = secret.userProfilePicture,&#10;                                            contentDescription = &quot;Profile&quot;,&#10;                                            modifier = Modifier.fillMaxSize(),&#10;                                            contentScale = ContentScale.Crop&#10;                                        )&#10;                                    } else {&#10;                                        Icon(&#10;                                            imageVector = Icons.Default.Person,&#10;                                            contentDescription = &quot;Profile&quot;,&#10;                                            tint = Color(0xFFFF4D4D),&#10;                                            modifier = Modifier.size(24.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Column {&#10;                                    Text(&#10;                                        text = secret.username,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White&#10;                                    )&#10;                                    Text(&#10;                                        text = LocationHelper.formatTimestamp(secret.timestamp),&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Color.White.copy(alpha = 0.6f)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                            // Secret text&#10;                            Text(&#10;                                text = secret.text,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                color = Color.White&#10;                            )&#10;&#10;                            // Image if available&#10;                            secret.imageUrl?.let { imageUrl -&gt;&#10;                                Spacer(modifier = Modifier.height(12.dp))&#10;                                AsyncImage(&#10;                                    model = imageUrl,&#10;                                    contentDescription = &quot;Secret image&quot;,&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .heightIn(max = 400.dp)&#10;                                        .clip(RoundedCornerShape(12.dp)),&#10;                                    contentScale = ContentScale.Crop&#10;                                )&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                            // Location&#10;                            secret.distance?.let { distance -&gt;&#10;                                Row(&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.LocationOn,&#10;                                        contentDescription = null,&#10;                                        tint = Color(0xFFFF4D4D),&#10;                                        modifier = Modifier.size(16.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = LocationHelper.formatDistance(distance) + &quot; away&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = Color(0xFFFF4D4D)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Like and Comment Actions&#10;                item {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        // Like Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = if (isLikedByCurrentUser)&#10;                                Color(0xFFFF4D4D)&#10;                            else&#10;                                Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                if (isLikedByCurrentUser)&#10;                                    Color(0xFFFF4D4D)&#10;                                else&#10;                                    Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            ),&#10;                            onClick = onLikeClick&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (isLikedByCurrentUser)&#10;                                        Icons.Default.Favorite&#10;                                    else&#10;                                        Icons.Default.FavoriteBorder,&#10;                                    contentDescription = &quot;Like&quot;,&#10;                                    tint = if (isLikedByCurrentUser)&#10;                                        Color.White&#10;                                    else&#10;                                        Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;${secret.likeCount}&quot;,&#10;                                    color = if (isLikedByCurrentUser)&#10;                                        Color.White&#10;                                    else&#10;                                        Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Comment Count Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Comment,&#10;                                    contentDescription = &quot;Comments&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = &quot;${secret.commentCount}&quot;,&#10;                                    color = Color.White,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // View Likes Button&#10;                        Surface(&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#10;                            ),&#10;                            onClick = { showLikes = true }&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.padding(12.dp),&#10;                                horizontalArrangement = Arrangement.Center,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Visibility,&#10;                                    contentDescription = &quot;View Likes&quot;,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Comments Header&#10;                item {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Comments&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = &quot;(${comments.size})&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Comments List&#10;                if (comments.isEmpty()) {&#10;                    item {&#10;                        Surface(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            color = Color(0xFF1C1C1C),&#10;                            border = androidx.compose.foundation.BorderStroke(&#10;                                1.dp,&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.15f)&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(24.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Comment,&#10;                                    contentDescription = null,&#10;                                    tint = Color.White.copy(alpha = 0.3f),&#10;                                    modifier = Modifier.size(48.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Text(&#10;                                    text = &quot;No comments yet&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.White.copy(alpha = 0.6f)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Be the first to comment!&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = Color.White.copy(alpha = 0.4f)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    items(comments) { comment -&gt;&#10;                        CommentItem(comment = comment)&#10;                    }&#10;                }&#10;&#10;                // Bottom spacing&#10;                item {&#10;                    Spacer(modifier = Modifier.height(80.dp))&#10;                }&#10;            }&#10;&#10;            // Comment Input (Fixed at bottom)&#10;            Surface(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                color = Color(0xFF121212),&#10;                shadowElevation = 8.dp&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    verticalAlignment = Alignment.Bottom&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = commentText,&#10;                        onValueChange = { commentText = it },&#10;                        modifier = Modifier.weight(1f),&#10;                        placeholder = {&#10;                            Text(&#10;                                &quot;Add a comment...&quot;,&#10;                                color = Color.White.copy(alpha = 0.5f)&#10;                            )&#10;                        },&#10;                        maxLines = 3,&#10;                        shape = RoundedCornerShape(12.dp),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Color(0xFFFF4D4D),&#10;                            unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#10;                            cursorColor = Color(0xFFFF4D4D),&#10;                            focusedTextColor = Color.White,&#10;                            unfocusedTextColor = Color.White&#10;                        )&#10;                    )&#10;&#10;                    Surface(&#10;                        shape = CircleShape,&#10;                        color = if (commentText.isNotBlank())&#10;                            Color(0xFFFF4D4D)&#10;                        else&#10;                            Color(0xFF1C1C1C),&#10;                        onClick = {&#10;                            if (commentText.isNotBlank() &amp;&amp; !isLoading) {&#10;                                onCommentSubmit(commentText)&#10;                                commentText = &quot;&quot;&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.Send,&#10;                            contentDescription = &quot;Send&quot;,&#10;                            tint = if (commentText.isNotBlank())&#10;                                Color.White&#10;                            else&#10;                                Color.White.copy(alpha = 0.3f),&#10;                            modifier = Modifier&#10;                                .padding(12.dp)&#10;                                .size(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Likes Dialog&#10;    if (showLikes) {&#10;        AlertDialog(&#10;            onDismissRequest = { showLikes = false },&#10;            containerColor = Color(0xFF121212),&#10;            title = {&#10;                Text(&#10;                    &quot;Likes (${likes.size})&quot;,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            text = {&#10;                if (likes.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.FavoriteBorder,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.3f),&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;No likes yet&quot;,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        modifier = Modifier.heightIn(max = 400.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        items(likes) { like -&gt;&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(vertical = 8.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    Icons.Default.Favorite,&#10;                                    contentDescription = null,&#10;                                    tint = Color(0xFFFF4D4D),&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Text(&#10;                                    like.username,&#10;                                    color = Color.White,&#10;                                    style = MaterialTheme.typography.bodyLarge&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = { showLikes = false }&#10;                ) {&#10;                    Text(&quot;Close&quot;, color = Color(0xFFFF4D4D))&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CommentItem(comment: Comment) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(12.dp),&#10;        color = Color(0xFF1C1C1C),&#10;        border = androidx.compose.foundation.BorderStroke(&#10;            1.dp,&#10;            Color(0xFFFF4D4D).copy(alpha = 0.15f)&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp)&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .clip(CircleShape)&#10;                    .background(Color(0xFF0C0C0C))&#10;                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                if (comment.userProfilePicture != null) {&#10;                    AsyncImage(&#10;                        model = comment.userProfilePicture,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Person,&#10;                        contentDescription = &quot;Profile&quot;,&#10;                        tint = Color(0xFFFF4D4D),&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = comment.username,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White&#10;                    )&#10;                    Text(&#10;                        text = LocationHelper.formatTimestamp(comment.timestamp),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.White.copy(alpha = 0.5f)&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(6.dp))&#10;                Text(&#10;                    text = comment.text,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = Color.White.copy(alpha = 0.9f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.secretspaces32.android.ui.screens&#13;&#10;&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.border&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.shape.CircleShape&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#13;&#10;import androidx.compose.material.icons.automirrored.filled.Send&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.layout.ContentScale&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import coil.compose.AsyncImage&#13;&#10;import com.secretspaces32.android.data.model.Comment&#13;&#10;import com.secretspaces32.android.data.model.Like&#13;&#10;import com.secretspaces32.android.data.model.Secret&#13;&#10;import com.secretspaces32.android.utils.LocationHelper&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun SecretDetailScreen(&#13;&#10;    secret: Secret,&#13;&#10;    comments: List&lt;Comment&gt;,&#13;&#10;    likes: List&lt;Like&gt;,&#13;&#10;    isLikedByCurrentUser: Boolean,&#13;&#10;    onLikeClick: () -&gt; Unit,&#13;&#10;    onCommentSubmit: (String) -&gt; Unit,&#13;&#10;    onBack: () -&gt; Unit,&#13;&#10;    isLoading: Boolean = false&#13;&#10;) {&#13;&#10;    var commentText by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var showLikes by remember { mutableStateOf(false) }&#13;&#10;&#13;&#10;    Box(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .background(Color(0xFF0C0C0C))&#13;&#10;    ) {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier.fillMaxSize()&#13;&#10;        ) {&#13;&#10;            // Top Bar&#13;&#10;            Row(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .statusBarsPadding()&#13;&#10;                    .padding(16.dp),&#13;&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                verticalAlignment = Alignment.CenterVertically&#13;&#10;            ) {&#13;&#10;                IconButton(onClick = onBack) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#13;&#10;                        contentDescription = &quot;Back&quot;,&#13;&#10;                        tint = Color(0xFFFF4D4D)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;&#13;&#10;                Text(&#13;&#10;                    text = &quot;Secret Details&quot;,&#13;&#10;                    style = MaterialTheme.typography.headlineSmall,&#13;&#10;                    fontWeight = FontWeight.Bold,&#13;&#10;                    color = Color.White&#13;&#10;                )&#13;&#10;&#13;&#10;                // Placeholder for symmetry&#13;&#10;                Box(modifier = Modifier.size(48.dp))&#13;&#10;            }&#13;&#10;&#13;&#10;            LazyColumn(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxSize()&#13;&#10;                    .weight(1f),&#13;&#10;                contentPadding = PaddingValues(&#13;&#10;                    start = 16.dp,&#13;&#10;                    end = 16.dp,&#13;&#10;                    top = 16.dp,&#13;&#10;                    bottom = 96.dp&#13;&#10;                ),&#13;&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;            ) {&#13;&#10;                // Secret Content Card&#13;&#10;                item {&#13;&#10;                    Surface(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        shape = RoundedCornerShape(16.dp),&#13;&#10;                        color = Color(0xFF121212),&#13;&#10;                        border = androidx.compose.foundation.BorderStroke(&#13;&#10;                            1.dp,&#13;&#10;                            Color(0xFFFF4D4D).copy(alpha = 0.3f)&#13;&#10;                        )&#13;&#10;                    ) {&#13;&#10;                        Column(&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .padding(16.dp)&#13;&#10;                        ) {&#13;&#10;                            // User info&#13;&#10;                            Row(&#13;&#10;                                modifier = Modifier.fillMaxWidth(),&#13;&#10;                                verticalAlignment = Alignment.CenterVertically&#13;&#10;                            ) {&#13;&#10;                                Box(&#13;&#10;                                    modifier = Modifier&#13;&#10;                                        .size(40.dp)&#13;&#10;                                        .clip(CircleShape)&#13;&#10;                                        .background(Color(0xFF1C1C1C))&#13;&#10;                                        .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#13;&#10;                                    contentAlignment = Alignment.Center&#13;&#10;                                ) {&#13;&#10;                                    if (secret.userProfilePicture != null) {&#13;&#10;                                        AsyncImage(&#13;&#10;                                            model = secret.userProfilePicture,&#13;&#10;                                            contentDescription = &quot;Profile&quot;,&#13;&#10;                                            modifier = Modifier.fillMaxSize(),&#13;&#10;                                            contentScale = ContentScale.Crop&#13;&#10;                                        )&#13;&#10;                                    } else {&#13;&#10;                                        Icon(&#13;&#10;                                            imageVector = Icons.Default.Person,&#13;&#10;                                            contentDescription = &quot;Profile&quot;,&#13;&#10;                                            tint = Color(0xFFFF4D4D),&#13;&#10;                                            modifier = Modifier.size(24.dp)&#13;&#10;                                        )&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                                Spacer(modifier = Modifier.width(12.dp))&#13;&#10;                                Column {&#13;&#10;                                    Text(&#13;&#10;                                        text = secret.username,&#13;&#10;                                        style = MaterialTheme.typography.titleMedium,&#13;&#10;                                        fontWeight = FontWeight.Bold,&#13;&#10;                                        color = Color.White&#13;&#10;                                    )&#13;&#10;                                    Text(&#13;&#10;                                        text = LocationHelper.formatTimestamp(secret.timestamp),&#13;&#10;                                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                                        color = Color.White.copy(alpha = 0.6f)&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;&#13;&#10;                            Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                            // Secret text&#13;&#10;                            Text(&#13;&#10;                                text = secret.text,&#13;&#10;                                style = MaterialTheme.typography.bodyLarge,&#13;&#10;                                color = Color.White&#13;&#10;                            )&#13;&#10;&#13;&#10;                            // Image if available&#13;&#10;                            secret.imageUrl?.let { imageUrl -&gt;&#13;&#10;                                Spacer(modifier = Modifier.height(12.dp))&#13;&#10;                                AsyncImage(&#13;&#10;                                    model = imageUrl,&#13;&#10;                                    contentDescription = &quot;Secret image&quot;,&#13;&#10;                                    modifier = Modifier&#13;&#10;                                        .fillMaxWidth()&#13;&#10;                                        .heightIn(max = 400.dp)&#13;&#10;                                        .clip(RoundedCornerShape(12.dp)),&#13;&#10;                                    contentScale = ContentScale.Crop&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;&#13;&#10;                            Spacer(modifier = Modifier.height(12.dp))&#13;&#10;&#13;&#10;                            // Location&#13;&#10;                            secret.distance?.let { distance -&gt;&#13;&#10;                                Row(&#13;&#10;                                    verticalAlignment = Alignment.CenterVertically&#13;&#10;                                ) {&#13;&#10;                                    Icon(&#13;&#10;                                        imageVector = Icons.Default.LocationOn,&#13;&#10;                                        contentDescription = null,&#13;&#10;                                        tint = Color(0xFFFF4D4D),&#13;&#10;                                        modifier = Modifier.size(16.dp)&#13;&#10;                                    )&#13;&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#13;&#10;                                    Text(&#13;&#10;                                        text = LocationHelper.formatDistance(distance) + &quot; away&quot;,&#13;&#10;                                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                                        color = Color(0xFFFF4D4D)&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                // Like and Comment Actions&#13;&#10;                item {&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;                    ) {&#13;&#10;                        // Like Button&#13;&#10;                        Surface(&#13;&#10;                            modifier = Modifier.weight(1f),&#13;&#10;                            shape = RoundedCornerShape(12.dp),&#13;&#10;                            color = if (isLikedByCurrentUser)&#13;&#10;                                Color(0xFFFF4D4D)&#13;&#10;                            else&#13;&#10;                                Color(0xFF1C1C1C),&#13;&#10;                            border = androidx.compose.foundation.BorderStroke(&#13;&#10;                                1.dp,&#13;&#10;                                if (isLikedByCurrentUser)&#13;&#10;                                    Color(0xFFFF4D4D)&#13;&#10;                                else&#13;&#10;                                    Color(0xFFFF4D4D).copy(alpha = 0.3f)&#13;&#10;                            ),&#13;&#10;                            onClick = onLikeClick&#13;&#10;                        ) {&#13;&#10;                            Row(&#13;&#10;                                modifier = Modifier.padding(12.dp),&#13;&#10;                                horizontalArrangement = Arrangement.Center,&#13;&#10;                                verticalAlignment = Alignment.CenterVertically&#13;&#10;                            ) {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = if (isLikedByCurrentUser)&#13;&#10;                                        Icons.Default.Favorite&#13;&#10;                                    else&#13;&#10;                                        Icons.Default.FavoriteBorder,&#13;&#10;                                    contentDescription = &quot;Like&quot;,&#13;&#10;                                    tint = if (isLikedByCurrentUser)&#13;&#10;                                        Color.White&#13;&#10;                                    else&#13;&#10;                                        Color(0xFFFF4D4D),&#13;&#10;                                    modifier = Modifier.size(20.dp)&#13;&#10;                                )&#13;&#10;                                Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                                Text(&#13;&#10;                                    text = &quot;${secret.likeCount}&quot;,&#13;&#10;                                    color = if (isLikedByCurrentUser)&#13;&#10;                                        Color.White&#13;&#10;                                    else&#13;&#10;                                        Color.White,&#13;&#10;                                    fontWeight = FontWeight.Bold&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;&#13;&#10;                        // Comment Count Button&#13;&#10;                        Surface(&#13;&#10;                            modifier = Modifier.weight(1f),&#13;&#10;                            shape = RoundedCornerShape(12.dp),&#13;&#10;                            color = Color(0xFF1C1C1C),&#13;&#10;                            border = androidx.compose.foundation.BorderStroke(&#13;&#10;                                1.dp,&#13;&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#13;&#10;                            )&#13;&#10;                        ) {&#13;&#10;                            Row(&#13;&#10;                                modifier = Modifier.padding(12.dp),&#13;&#10;                                horizontalArrangement = Arrangement.Center,&#13;&#10;                                verticalAlignment = Alignment.CenterVertically&#13;&#10;                            ) {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = Icons.Default.Comment,&#13;&#10;                                    contentDescription = &quot;Comments&quot;,&#13;&#10;                                    tint = Color(0xFFFF4D4D),&#13;&#10;                                    modifier = Modifier.size(20.dp)&#13;&#10;                                )&#13;&#10;                                Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                                Text(&#13;&#10;                                    text = &quot;${secret.commentCount}&quot;,&#13;&#10;                                    color = Color.White,&#13;&#10;                                    fontWeight = FontWeight.Bold&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;&#13;&#10;                        // View Likes Button&#13;&#10;                        Surface(&#13;&#10;                            modifier = Modifier.weight(1f),&#13;&#10;                            shape = RoundedCornerShape(12.dp),&#13;&#10;                            color = Color(0xFF1C1C1C),&#13;&#10;                            border = androidx.compose.foundation.BorderStroke(&#13;&#10;                                1.dp,&#13;&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.3f)&#13;&#10;                            ),&#13;&#10;                            onClick = { showLikes = true }&#13;&#10;                        ) {&#13;&#10;                            Row(&#13;&#10;                                modifier = Modifier.padding(12.dp),&#13;&#10;                                horizontalArrangement = Arrangement.Center,&#13;&#10;                                verticalAlignment = Alignment.CenterVertically&#13;&#10;                            ) {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = Icons.Default.Visibility,&#13;&#10;                                    contentDescription = &quot;View Likes&quot;,&#13;&#10;                                    tint = Color(0xFFFF4D4D),&#13;&#10;                                    modifier = Modifier.size(20.dp)&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                // Comments Header&#13;&#10;                item {&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier.fillMaxWidth(),&#13;&#10;                        verticalAlignment = Alignment.CenterVertically&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;Comments&quot;,&#13;&#10;                            style = MaterialTheme.typography.titleLarge,&#13;&#10;                            fontWeight = FontWeight.Bold,&#13;&#10;                            color = Color.White&#13;&#10;                        )&#13;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#13;&#10;                        Text(&#13;&#10;                            text = &quot;(${comments.size})&quot;,&#13;&#10;                            style = MaterialTheme.typography.titleMedium,&#13;&#10;                            color = Color.White.copy(alpha = 0.6f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                // Comments List&#13;&#10;                if (comments.isEmpty()) {&#13;&#10;                    item {&#13;&#10;                        Surface(&#13;&#10;                            modifier = Modifier.fillMaxWidth(),&#13;&#10;                            shape = RoundedCornerShape(12.dp),&#13;&#10;                            color = Color(0xFF1C1C1C),&#13;&#10;                            border = androidx.compose.foundation.BorderStroke(&#13;&#10;                                1.dp,&#13;&#10;                                Color(0xFFFF4D4D).copy(alpha = 0.15f)&#13;&#10;                            )&#13;&#10;                        ) {&#13;&#10;                            Column(&#13;&#10;                                modifier = Modifier&#13;&#10;                                    .fillMaxWidth()&#13;&#10;                                    .padding(24.dp),&#13;&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                            ) {&#13;&#10;                                Icon(&#13;&#10;                                    imageVector = Icons.Default.Comment,&#13;&#10;                                    contentDescription = null,&#13;&#10;                                    tint = Color.White.copy(alpha = 0.3f),&#13;&#10;                                    modifier = Modifier.size(48.dp)&#13;&#10;                                )&#13;&#10;                                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                Text(&#13;&#10;                                    text = &quot;No comments yet&quot;,&#13;&#10;                                    style = MaterialTheme.typography.bodyLarge,&#13;&#10;                                    color = Color.White.copy(alpha = 0.6f)&#13;&#10;                                )&#13;&#10;                                Text(&#13;&#10;                                    text = &quot;Be the first to comment!&quot;,&#13;&#10;                                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                                    color = Color.White.copy(alpha = 0.4f)&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    items(comments) { comment -&gt;&#13;&#10;                        CommentItem(comment = comment)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                // Bottom spacing&#13;&#10;                item {&#13;&#10;                    Spacer(modifier = Modifier.height(80.dp))&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Comment Input (Fixed at bottom)&#13;&#10;            Surface(&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                color = Color(0xFF121212),&#13;&#10;                shadowElevation = 8.dp&#13;&#10;            ) {&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(16.dp),&#13;&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#13;&#10;                    verticalAlignment = Alignment.Bottom&#13;&#10;                ) {&#13;&#10;                    OutlinedTextField(&#13;&#10;                        value = commentText,&#13;&#10;                        onValueChange = { commentText = it },&#13;&#10;                        modifier = Modifier.weight(1f),&#13;&#10;                        placeholder = {&#13;&#10;                            Text(&#13;&#10;                                &quot;Add a comment...&quot;,&#13;&#10;                                color = Color.White.copy(alpha = 0.5f)&#13;&#10;                            )&#13;&#10;                        },&#13;&#10;                        maxLines = 3,&#13;&#10;                        shape = RoundedCornerShape(12.dp),&#13;&#10;                        colors = OutlinedTextFieldDefaults.colors(&#13;&#10;                            focusedBorderColor = Color(0xFFFF4D4D),&#13;&#10;                            unfocusedBorderColor = Color(0xFFFF4D4D).copy(alpha = 0.3f),&#13;&#10;                            cursorColor = Color(0xFFFF4D4D),&#13;&#10;                            focusedTextColor = Color.White,&#13;&#10;                            unfocusedTextColor = Color.White&#13;&#10;                        )&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Surface(&#13;&#10;                        shape = CircleShape,&#13;&#10;                        color = if (commentText.isNotBlank())&#13;&#10;                            Color(0xFFFF4D4D)&#13;&#10;                        else&#13;&#10;                            Color(0xFF1C1C1C),&#13;&#10;                        onClick = {&#13;&#10;                            if (commentText.isNotBlank() &amp;&amp; !isLoading) {&#13;&#10;                                onCommentSubmit(commentText)&#13;&#10;                                commentText = &quot;&quot;&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    ) {&#13;&#10;                        Icon(&#13;&#10;                            imageVector = Icons.AutoMirrored.Filled.Send,&#13;&#10;                            contentDescription = &quot;Send&quot;,&#13;&#10;                            tint = if (commentText.isNotBlank())&#13;&#10;                                Color.White&#13;&#10;                            else&#13;&#10;                                Color.White.copy(alpha = 0.3f),&#13;&#10;                            modifier = Modifier&#13;&#10;                                .padding(12.dp)&#13;&#10;                                .size(24.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Likes Dialog&#13;&#10;    if (showLikes) {&#13;&#10;        AlertDialog(&#13;&#10;            onDismissRequest = { showLikes = false },&#13;&#10;            containerColor = Color(0xFF121212),&#13;&#10;            title = {&#13;&#10;                Text(&#13;&#10;                    &quot;Likes (${likes.size})&quot;,&#13;&#10;                    color = Color.White,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;            },&#13;&#10;            text = {&#13;&#10;                if (likes.isEmpty()) {&#13;&#10;                    Column(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(16.dp),&#13;&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                    ) {&#13;&#10;                        Icon(&#13;&#10;                            imageVector = Icons.Default.FavoriteBorder,&#13;&#10;                            contentDescription = null,&#13;&#10;                            tint = Color.White.copy(alpha = 0.3f),&#13;&#10;                            modifier = Modifier.size(48.dp)&#13;&#10;                        )&#13;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                        Text(&#13;&#10;                            &quot;No likes yet&quot;,&#13;&#10;                            color = Color.White.copy(alpha = 0.6f)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    LazyColumn(&#13;&#10;                        modifier = Modifier.heightIn(max = 400.dp),&#13;&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                    ) {&#13;&#10;                        items(likes) { like -&gt;&#13;&#10;                            Row(&#13;&#10;                                modifier = Modifier&#13;&#10;                                    .fillMaxWidth()&#13;&#10;                                    .padding(vertical = 8.dp),&#13;&#10;                                verticalAlignment = Alignment.CenterVertically&#13;&#10;                            ) {&#13;&#10;                                Icon(&#13;&#10;                                    Icons.Default.Favorite,&#13;&#10;                                    contentDescription = null,&#13;&#10;                                    tint = Color(0xFFFF4D4D),&#13;&#10;                                    modifier = Modifier.size(20.dp)&#13;&#10;                                )&#13;&#10;                                Spacer(modifier = Modifier.width(12.dp))&#13;&#10;                                Text(&#13;&#10;                                    like.username,&#13;&#10;                                    color = Color.White,&#13;&#10;                                    style = MaterialTheme.typography.bodyLarge&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            },&#13;&#10;            confirmButton = {&#13;&#10;                TextButton(&#13;&#10;                    onClick = { showLikes = false }&#13;&#10;                ) {&#13;&#10;                    Text(&quot;Close&quot;, color = Color(0xFFFF4D4D))&#13;&#10;                }&#13;&#10;            }&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun CommentItem(comment: Comment) {&#13;&#10;    Surface(&#13;&#10;        modifier = Modifier.fillMaxWidth(),&#13;&#10;        shape = RoundedCornerShape(12.dp),&#13;&#10;        color = Color(0xFF1C1C1C),&#13;&#10;        border = androidx.compose.foundation.BorderStroke(&#13;&#10;            1.dp,&#13;&#10;            Color(0xFFFF4D4D).copy(alpha = 0.15f)&#13;&#10;        )&#13;&#10;    ) {&#13;&#10;        Row(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(12.dp)&#13;&#10;        ) {&#13;&#10;            Box(&#13;&#10;                modifier = Modifier&#13;&#10;                    .size(36.dp)&#13;&#10;                    .clip(CircleShape)&#13;&#10;                    .background(Color(0xFF0C0C0C))&#13;&#10;                    .border(1.dp, Color(0xFFFF4D4D).copy(alpha = 0.3f), CircleShape),&#13;&#10;                contentAlignment = Alignment.Center&#13;&#10;            ) {&#13;&#10;                if (comment.userProfilePicture != null) {&#13;&#10;                    AsyncImage(&#13;&#10;                        model = comment.userProfilePicture,&#13;&#10;                        contentDescription = &quot;Profile&quot;,&#13;&#10;                        modifier = Modifier.fillMaxSize(),&#13;&#10;                        contentScale = ContentScale.Crop&#13;&#10;                    )&#13;&#10;                } else {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.Person,&#13;&#10;                        contentDescription = &quot;Profile&quot;,&#13;&#10;                        tint = Color(0xFFFF4D4D),&#13;&#10;                        modifier = Modifier.size(20.dp)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;            Spacer(modifier = Modifier.width(12.dp))&#13;&#10;            Column(modifier = Modifier.weight(1f)) {&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#13;&#10;                    verticalAlignment = Alignment.CenterVertically&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = comment.username,&#13;&#10;                        style = MaterialTheme.typography.titleSmall,&#13;&#10;                        fontWeight = FontWeight.Bold,&#13;&#10;                        color = Color.White&#13;&#10;                    )&#13;&#10;                    Text(&#13;&#10;                        text = LocationHelper.formatTimestamp(comment.timestamp),&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        color = Color.White.copy(alpha = 0.5f)&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                Spacer(modifier = Modifier.height(6.dp))&#13;&#10;                Text(&#13;&#10;                    text = comment.text,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = Color.White.copy(alpha = 0.9f)&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>